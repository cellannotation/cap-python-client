# Generated by ariadne-codegen
# Source: queries.graphql

from typing import Any, Dict, Optional, Union

from .async_base_client import AsyncBaseClient
from .base_model import UNSET, UnsetType
from .input_types import (
    DatasetSearchOptions,
    LookupDatasetsFiltersInput,
    LookupDatasetsSearchInput,
)
from .search_datasets import SearchDatasets


def gql(q: str) -> str:
    return q


class Client(AsyncBaseClient):
    async def search_datasets(
        self,
        options: Union[Optional[DatasetSearchOptions], UnsetType] = UNSET,
        search: Union[Optional[LookupDatasetsSearchInput], UnsetType] = UNSET,
        filter: Union[Optional[LookupDatasetsFiltersInput], UnsetType] = UNSET,
        **kwargs: Any
    ) -> SearchDatasets:
        query = gql(
            """
            query SearchDatasets($options: DatasetSearchOptions, $search: LookupDatasetsSearchInput, $filter: LookupDatasetsFiltersInput) {
              results: lookupDatasets(options: $options, search: $search, filter: $filter) {
                id
                name
                ...DatasetResult
                __typename
              }
            }

            fragment DatasetResult on DatasetLookupResponse {
              id
              name
              cellCount
              labelsets {
                id
                name
                labels {
                  id
                  name
                  count
                  __typename
                }
                __typename
              }
              project {
                id
                name
                ...ProjectAuthorsData
                __typename
              }
              __typename
            }

            fragment ProjectAuthorsData on Project {
              version
              owner {
                uid
                displayName
                avatarUrl
                __typename
              }
              permissions {
                id
                isActive
                role
                user {
                  uid
                  displayName
                  avatarUrl
                  __typename
                }
                __typename
              }
              __typename
            }
            """
        )
        variables: Dict[str, object] = {
            "options": options,
            "search": search,
            "filter": filter,
        }
        response = await self.execute(
            query=query, operation_name="SearchDatasets", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return SearchDatasets.model_validate(data)
    
    async def __enter__(self):
        return self

    async def __exit__(
        self,
        exc_type: object,
        exc_val: object,
        exc_tb: object,
    ) -> None:
        await self.http_client.aclose()
