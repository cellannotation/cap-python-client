# Generated by ariadne-codegen

from typing import Any, Dict, Optional

from .custom_fields import (
    CapUserFields,
    DatasetDownloadUrlsResponseFields,
    DatasetFields,
    DatasetLookupResponseFields,
    DatasetModelFields,
    DatasetValidationFields,
    GroupedMetadataResponseFields,
    HomepageStatisticsResponseFields,
    LabelCategoryFields,
    LabelFields,
    LabelSynonymFields,
    ProjectFields,
    ProjectPermissionFields,
    TissueTermFields,
    UploadResponseFields,
)
from .custom_typing_fields import GraphQLField
from .input_types import (
    CellLabelsSearchOptions,
    DatasetSearchOptions,
    DatasetUpdateJobIdentifier,
    GetEmbeddingSessionSnapshotInput,
    GetLabelInput,
    LookupCellsSearch,
    LookupDatasetsFiltersInput,
    LookupDatasetsSearchInput,
    LookupLabelCategoriesSearch,
    LookupLabelsFilters,
    LookupSynonymsSearch,
    LookupTissueTermsOptions,
    LookupTissueTermsSearch,
    LookupUsersSearchInput,
    SearchOptionsInput,
    UploadIdentifier,
    ValidateDatasetInput,
)


class Query:
    @classmethod
    def user(cls, uid: str) -> CapUserFields:
        arguments: Dict[str, Dict[str, Any]] = {"uid": {"type": "ID!", "value": uid}}
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CapUserFields(field_name="user", arguments=cleared_arguments)

    @classmethod
    def lookup_users(
        cls,
        options: SearchOptionsInput,
        *,
        search: Optional[LookupUsersSearchInput] = None
    ) -> CapUserFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "options": {"type": "SearchOptionsInput!", "value": options},
            "search": {"type": "LookupUsersSearchInput", "value": search},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CapUserFields(field_name="lookupUsers", arguments=cleared_arguments)

    @classmethod
    def label(cls, label: GetLabelInput) -> LabelFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "label": {"type": "GetLabelInput!", "value": label}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelFields(field_name="label", arguments=cleared_arguments)

    @classmethod
    def lookup_synonyms(
        cls,
        options: SearchOptionsInput,
        *,
        search: Optional[LookupSynonymsSearch] = None
    ) -> LabelSynonymFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "options": {"type": "SearchOptionsInput!", "value": options},
            "search": {"type": "LookupSynonymsSearch", "value": search},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelSynonymFields(
            field_name="lookupSynonyms", arguments=cleared_arguments
        )

    @classmethod
    def lookup_cells(
        cls,
        options: CellLabelsSearchOptions,
        *,
        filter: Optional[LookupLabelsFilters] = None,
        search: Optional[LookupCellsSearch] = None
    ) -> LabelFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "options": {"type": "CellLabelsSearchOptions!", "value": options},
            "filter": {"type": "LookupLabelsFilters", "value": filter},
            "search": {"type": "LookupCellsSearch", "value": search},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelFields(field_name="lookupCells", arguments=cleared_arguments)

    @classmethod
    def list_metadata_types(cls) -> GroupedMetadataResponseFields:
        return GroupedMetadataResponseFields(field_name="listMetadataTypes")

    @classmethod
    def upload_list(cls) -> UploadResponseFields:
        return UploadResponseFields(field_name="uploadList")

    @classmethod
    def pending_uploads(cls) -> UploadResponseFields:
        return UploadResponseFields(field_name="pendingUploads")

    @classmethod
    def upload(cls, upload: UploadIdentifier) -> UploadResponseFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "upload": {"type": "UploadIdentifier!", "value": upload}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UploadResponseFields(field_name="upload", arguments=cleared_arguments)

    @classmethod
    def dataset(cls, dataset_id: str) -> DatasetFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "datasetId": {"type": "ID!", "value": dataset_id}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasetFields(field_name="dataset", arguments=cleared_arguments)

    @classmethod
    def lookup_datasets(
        cls,
        *,
        options: Optional[DatasetSearchOptions] = None,
        filter: Optional[LookupDatasetsFiltersInput] = None,
        search: Optional[LookupDatasetsSearchInput] = None
    ) -> DatasetLookupResponseFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "options": {"type": "DatasetSearchOptions", "value": options},
            "filter": {"type": "LookupDatasetsFiltersInput", "value": filter},
            "search": {"type": "LookupDatasetsSearchInput", "value": search},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasetLookupResponseFields(
            field_name="lookupDatasets", arguments=cleared_arguments
        )

    @classmethod
    def download_urls(cls, dataset_id: str) -> DatasetDownloadUrlsResponseFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "datasetId": {"type": "ID!", "value": dataset_id}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasetDownloadUrlsResponseFields(
            field_name="downloadUrls", arguments=cleared_arguments
        )

    @classmethod
    def validate_dataset(cls, dataset: ValidateDatasetInput) -> DatasetValidationFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "dataset": {"type": "ValidateDatasetInput!", "value": dataset}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasetValidationFields(
            field_name="validateDataset", arguments=cleared_arguments
        )

    @classmethod
    def is_last_update(cls, update_job: DatasetUpdateJobIdentifier) -> GraphQLField:
        arguments: Dict[str, Dict[str, Any]] = {
            "updateJob": {"type": "DatasetUpdateJobIdentifier!", "value": update_job}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GraphQLField(field_name="isLastUpdate", arguments=cleared_arguments)

    @classmethod
    def embeddings_session_snapshot(
        cls, data: GetEmbeddingSessionSnapshotInput
    ) -> DatasetModelFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "data": {"type": "GetEmbeddingSessionSnapshotInput!", "value": data}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasetModelFields(
            field_name="embeddingsSessionSnapshot", arguments=cleared_arguments
        )

    @classmethod
    def project_permissions(cls) -> ProjectPermissionFields:
        return ProjectPermissionFields(field_name="projectPermissions")

    @classmethod
    def homepage_statistics(cls) -> HomepageStatisticsResponseFields:
        return HomepageStatisticsResponseFields(field_name="homepageStatistics")

    @classmethod
    def lookup_label_categories(
        cls,
        options: SearchOptionsInput,
        *,
        search: Optional[LookupLabelCategoriesSearch] = None
    ) -> LabelCategoryFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "options": {"type": "SearchOptionsInput!", "value": options},
            "search": {"type": "LookupLabelCategoriesSearch", "value": search},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelCategoryFields(
            field_name="lookupLabelCategories", arguments=cleared_arguments
        )

    @classmethod
    def lookup_tissue_terms(
        cls,
        *,
        options: Optional[LookupTissueTermsOptions] = None,
        search: Optional[LookupTissueTermsSearch] = None
    ) -> TissueTermFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "options": {"type": "LookupTissueTermsOptions", "value": options},
            "search": {"type": "LookupTissueTermsSearch", "value": search},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TissueTermFields(
            field_name="lookupTissueTerms", arguments=cleared_arguments
        )

    @classmethod
    def project(cls, *, project_id: Optional[str] = None) -> ProjectFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "projectId": {"type": "ID", "value": project_id}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectFields(field_name="project", arguments=cleared_arguments)
