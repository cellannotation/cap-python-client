# Generated by ariadne-codegen
# Source: queries.graphql

from typing import Any, List, Literal, Optional

from pydantic import Field

from .base_model import BaseModel


class ProjectAuthorsData(BaseModel):
    version: float
    owner: "ProjectAuthorsDataOwner"
    permissions: List["ProjectAuthorsDataPermissions"]
    typename__: str = Field(alias="__typename")


class ProjectAuthorsDataOwner(BaseModel):
    uid: str
    display_name: str = Field(alias="displayName")
    avatar_url: str = Field(alias="avatarUrl")
    typename__: Literal["CapUser"] = Field(alias="__typename")


class ProjectAuthorsDataPermissions(BaseModel):
    id: str
    is_active: bool = Field(alias="isActive")
    role: Any
    user: "ProjectAuthorsDataPermissionsUser"
    typename__: Literal["ProjectPermission"] = Field(alias="__typename")


class ProjectAuthorsDataPermissionsUser(BaseModel):
    uid: str
    display_name: str = Field(alias="displayName")
    avatar_url: str = Field(alias="avatarUrl")
    typename__: Literal["CapUser"] = Field(alias="__typename")


class DatasetResult(BaseModel):
    id: str
    name: str
    cell_count: Optional[float] = Field(alias="cellCount")
    labelsets: Optional[List["DatasetResultLabelsets"]]
    project: "DatasetResultProject"
    typename__: str = Field(alias="__typename")


class DatasetResultLabelsets(BaseModel):
    id: str
    name: str
    labels: Optional[List["DatasetResultLabelsetsLabels"]]
    typename__: Literal["Labelset"] = Field(alias="__typename")


class DatasetResultLabelsetsLabels(BaseModel):
    id: str
    name: str
    count: int
    typename__: Literal["Label"] = Field(alias="__typename")


class DatasetResultProject(ProjectAuthorsData):
    id: str
    name: str
    typename__: Literal["Project"] = Field(alias="__typename")


ProjectAuthorsData.model_rebuild()
DatasetResult.model_rebuild()
