# Generated by ariadne-codegen
# Source: queries.graphql

from typing import List, Literal, Optional

from pydantic import Field

from .base_model import (
    BaseModel,
    Dataset,
    LabelSet,
    Label
)


class CreateSession(BaseModel):
    save_embedding_session: "CreateSessionSaveEmbeddingSession" = Field(
        alias="saveEmbeddingSession"
    )


class CreateSessionSaveEmbeddingSession(Dataset):
    labelsets: Optional[List["CreateSessionSaveEmbeddingSessionLabelsets"]]
    dataset_type: Optional[str] = Field(alias="datasetType")
    description: Optional[str]
    typename__: Literal["DatasetModel"] = Field(alias="__typename")

"""
class DatasetResult(BaseModel):
    id: str
    name: str
    cell_count: float = Field(alias="cellCount")
    labelsets: Optional[List["DatasetResultLabelsets"]]
    project: "DatasetResultProject"
    typename__: str = Field(alias="__typename")
"""

class CreateSessionSaveEmbeddingSessionLabelsets(LabelSet):
    typename__: Literal["LabelsetModel"] = Field(alias="__typename")
    labels: Optional[List["CreateSessionSaveEmbeddingSessionLabelsetsLabels"]]


class CreateSessionSaveEmbeddingSessionLabelsetsLabels(Label):
    typename__: Literal["LabelModel"] = Field(alias="__typename")


CreateSession.model_rebuild()
CreateSessionSaveEmbeddingSession.model_rebuild()
CreateSessionSaveEmbeddingSessionLabelsets.model_rebuild()
