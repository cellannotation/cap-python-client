# Generated by ariadne-codegen
# Source: queries.graphql

from typing import List, Literal

from pydantic import Field

from .base_model import BaseModel


class EmbeddingData(BaseModel):
    dataset: "EmbeddingDataDataset"


class EmbeddingDataDataset(BaseModel):
    id: str
    embedding_data: "EmbeddingDataDatasetEmbeddingData" = Field(alias="embeddingData")
    typename__: Literal["Dataset"] = Field(alias="__typename")


class EmbeddingDataDatasetEmbeddingData(BaseModel):
    obs_ids: List[int] = Field(alias="obsIds")
    in_selection_major: List[bool] = Field(alias="inSelectionMajor")
    in_selection_minor: List[bool] = Field(alias="inSelectionMinor")
    embeddings: List["EmbeddingDataDatasetEmbeddingDataEmbeddings"]
    annotations: List["EmbeddingDataDatasetEmbeddingDataAnnotations"]
    gene_expression: List[float] = Field(alias="geneExpression")
    typename__: Literal["EmbeddingData"] = Field(alias="__typename")


class EmbeddingDataDatasetEmbeddingDataEmbeddings(BaseModel):
    x: float
    y: float
    typename__: Literal["EmbeddingMap"] = Field(alias="__typename")


class EmbeddingDataDatasetEmbeddingDataAnnotations(BaseModel):
    name: str
    items: List[str]
    typename__: Literal["EmbeddingDataAnnotationItem"] = Field(alias="__typename")


EmbeddingData.model_rebuild()
EmbeddingDataDataset.model_rebuild()
EmbeddingDataDatasetEmbeddingData.model_rebuild()
