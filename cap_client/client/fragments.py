# Generated by ariadne-codegen
# Source: queries.graphql

from typing import Any, List, Literal, Optional

from pydantic import Field

from .base_model import BaseModel


class GeneLinkLabelset(BaseModel):
    id: str
    labels: Optional[List["GeneLinkLabelsetLabels"]]
    typename__: str = Field(alias="__typename")


class GeneLinkLabelsetLabels(BaseModel):
    id: str
    name: str
    count: int
    typename__: Literal["Label"] = Field(alias="__typename")


class ProjectAuthorsProject(BaseModel):
    version: float
    owner: "ProjectAuthorsProjectOwner"
    permissions: List["ProjectAuthorsProjectPermissions"]
    typename__: str = Field(alias="__typename")


class ProjectAuthorsProjectOwner(BaseModel):
    uid: str
    temp_display_name: str = Field(alias="tempDisplayName")
    display_name: str = Field(alias="displayName")
    avatar_url: str = Field(alias="avatarUrl")
    typename__: Literal["CapUser"] = Field(alias="__typename")


class ProjectAuthorsProjectPermissions(BaseModel):
    id: str
    is_active: bool = Field(alias="isActive")
    role: Any
    user: "ProjectAuthorsProjectPermissionsUser"
    typename__: Literal["ProjectPermission"] = Field(alias="__typename")


class ProjectAuthorsProjectPermissionsUser(BaseModel):
    uid: str
    temp_display_name: str = Field(alias="tempDisplayName")
    display_name: str = Field(alias="displayName")
    avatar_url: str = Field(alias="avatarUrl")
    typename__: Literal["CapUser"] = Field(alias="__typename")


class CellLabelResult(BaseModel):
    id: str
    full_name: Optional[str] = Field(alias="fullName")
    name: str
    ontology_term_exists: Optional[bool] = Field(alias="ontologyTermExists")
    ontology_term_id: Optional[str] = Field(alias="ontologyTermId")
    ontology_term: Optional[str] = Field(alias="ontologyTerm")
    synonyms: List[str]
    category_ontology_term_exists: Optional[bool] = Field(
        alias="categoryOntologyTermExists"
    )
    category_ontology_term_id: Optional[str] = Field(alias="categoryOntologyTermId")
    category_ontology_term: Optional[str] = Field(alias="categoryOntologyTerm")
    category_full_name: Optional[str] = Field(alias="categoryFullName")
    marker_genes: List[str] = Field(alias="markerGenes")
    canonical_marker_genes: Optional[List[str]] = Field(alias="canonicalMarkerGenes")
    count: int
    labelset: "CellLabelResultLabelset"
    typename__: str = Field(alias="__typename")


class CellLabelResultLabelset(BaseModel):
    id: str
    name: str
    dataset: "CellLabelResultLabelsetDataset"
    typename__: Literal["Labelset"] = Field(alias="__typename")


class CellLabelResultLabelsetDataset(BaseModel):
    id: str
    name: str
    labelsets: Optional[List["CellLabelResultLabelsetDatasetLabelsets"]]
    project: "CellLabelResultLabelsetDatasetProject"
    typename__: Literal["Dataset"] = Field(alias="__typename")


class CellLabelResultLabelsetDatasetLabelsets(GeneLinkLabelset):
    id: str
    name: str
    labels: Optional[List["CellLabelResultLabelsetDatasetLabelsetsLabels"]]
    typename__: Literal["Labelset"] = Field(alias="__typename")


class CellLabelResultLabelsetDatasetLabelsetsLabels(BaseModel):
    id: str
    name: str
    count: int
    typename__: Literal["Label"] = Field(alias="__typename")


class CellLabelResultLabelsetDatasetProject(ProjectAuthorsProject):
    id: str
    name: str
    typename__: Literal["Project"] = Field(alias="__typename")


class DatasetResult(BaseModel):
    id: str
    name: str
    cell_count: float = Field(alias="cellCount")
    labelsets: Optional[List["DatasetResultLabelsets"]]
    project: "DatasetResultProject"
    typename__: str = Field(alias="__typename")


class DatasetResultLabelsets(BaseModel):
    id: str
    name: str
    labels: Optional[List["DatasetResultLabelsetsLabels"]]
    typename__: Literal["Labelset"] = Field(alias="__typename")


class DatasetResultLabelsetsLabels(BaseModel):
    id: str
    name: str
    count: int
    typename__: Literal["Label"] = Field(alias="__typename")


class DatasetResultProject(ProjectAuthorsProject):
    id: str
    name: str
    typename__: Literal["Project"] = Field(alias="__typename")


GeneLinkLabelset.model_rebuild()
ProjectAuthorsProject.model_rebuild()
CellLabelResult.model_rebuild()
DatasetResult.model_rebuild()
