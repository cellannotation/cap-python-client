# Generated by ariadne-codegen
# Source: https://celltype.info/graphql

from typing import Annotated, Any, List, Optional, Union

from pydantic import Field, PlainSerializer

from .base_model import BaseModel, Upload


class CellLabelsSearchOptions(BaseModel):
    offset: Optional[int] = None
    limit: Optional[int] = None
    sort: Optional[List["CellLabelsSearchSort"]] = None


class CellLabelsSearchSort(BaseModel):
    field: str
    order: str


class LookupLabelsFilters(BaseModel):
    metadata: Optional[List["SearchLabelByMetadataArgs"]] = None


class SearchLabelByMetadataArgs(BaseModel):
    field: str
    values: List[str]


class LookupCellsSearch(BaseModel):
    name: Optional[str] = None
    fields: Optional[List[str]] = None


class DatasetSearchOptions(BaseModel):
    offset: Optional[int] = None
    limit: Optional[int] = None
    sort: Optional[List["DatasetSearchSort"]] = None


class DatasetSearchSort(BaseModel):
    field: str
    order: str


class LookupDatasetsFiltersInput(BaseModel):
    metadata: Optional[List["SearchByMetadataArgs"]] = None
    labelset: Optional[List[str]] = None


class SearchByMetadataArgs(BaseModel):
    field: str
    values: List[str]


class LookupDatasetsSearchInput(BaseModel):
    cell_types: Optional[List[str]] = Field(alias="cellTypes", default=None)
    name: Optional[str] = None
    project_name: Optional[str] = Field(alias="projectName", default=None)
    project_description: Optional[str] = Field(alias="projectDescription", default=None)


CellLabelsSearchOptions.model_rebuild()
LookupLabelsFilters.model_rebuild()
DatasetSearchOptions.model_rebuild()
LookupDatasetsFiltersInput.model_rebuild()
