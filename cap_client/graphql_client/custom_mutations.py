# Generated by ariadne-codegen

from typing import Any, Dict, Optional

from .custom_fields import (
    ApproveInvitationResponseFields,
    CapUserFields,
    DatasetAsyncHCStartResponseFields,
    DatasetFields,
    DatasetModelFields,
    DeleteProjectResponseFields,
    DeleteResultResponseFields,
    LabelFeedbackFields,
    LabelFields,
    LabelsetFields,
    OperationResultFields,
    OperationResultResponseFields,
    ProjectFields,
    ProjectPermissionFields,
    UploadResponseFields,
)
from .input_types import (
    AddPermissionInput,
    CancelClusteredHeatmapInput,
    CancelProjectReviewInput,
    ClusteredHeatmapErrorInput,
    ClusteredHeatmapInput,
    CreateDatasetInfoInput,
    CreateDatasetInput,
    CreateLabelFeedbackInput,
    CreateNestedLabelsetInput,
    CreateProjectInput,
    CreatePublicationInput,
    CreateUserArg,
    DatasetIdentifierInput,
    DeclineProjectReviewInput,
    DeleteDatasetInput,
    DeleteProjectInput,
    EditDatasetCoreFieldsInput,
    EditDatasetEmbeddingsInput,
    EditDatasetInfoInput,
    EditDatasetInput,
    EditLabelInput,
    EditLabelsetInfoInput,
    EditLabelsetInput,
    EditProjectInput,
    EditUserArg,
    GetLabelInput,
    InviteByEmailInput,
    LabelObjectInput,
    LabelsetObjectInput,
    PostClusteredHeatmapInput,
    PostSaveEmbeddingSessionInput,
    RemovePermissionInput,
    ReportDatasetUpdateFailureInput,
    ReportDatasetUpdateInProgressInput,
    ResetCapUserPasswordInput,
    ReviewProjectRequestInput,
    SaveDatasetLabelCortegesInput,
    UpdateUploadPayload,
    UploadPayload,
    UploadUploader,
)


class Mutation:
    @classmethod
    def create_user(cls, user: CreateUserArg) -> CapUserFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "user": {"type": "CreateUserArg!", "value": user}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CapUserFields(field_name="createUser", arguments=cleared_arguments)

    @classmethod
    def edit_user(cls, user: EditUserArg) -> CapUserFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "user": {"type": "EditUserArg!", "value": user}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CapUserFields(field_name="editUser", arguments=cleared_arguments)

    @classmethod
    def update_avatar_upload_status(
        cls,
        object_id: str,
        uid: str,
        ok: bool,
        status: str,
        *,
        url: Optional[str] = None
    ) -> OperationResultResponseFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "objectId": {"type": "String!", "value": object_id},
            "uid": {"type": "String!", "value": uid},
            "ok": {"type": "Boolean!", "value": ok},
            "url": {"type": "String", "value": url},
            "status": {"type": "String!", "value": status},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return OperationResultResponseFields(
            field_name="updateAvatarUploadStatus", arguments=cleared_arguments
        )

    @classmethod
    def delete_cap_user(cls, uid: str) -> OperationResultResponseFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "uid": {"type": "String!", "value": uid}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return OperationResultResponseFields(
            field_name="deleteCapUser", arguments=cleared_arguments
        )

    @classmethod
    def reset_password(
        cls, params: ResetCapUserPasswordInput
    ) -> OperationResultResponseFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "params": {"type": "ResetCapUserPasswordInput!", "value": params}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return OperationResultResponseFields(
            field_name="resetPassword", arguments=cleared_arguments
        )

    @classmethod
    def edit_label(cls, label: EditLabelInput) -> LabelFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "label": {"type": "EditLabelInput!", "value": label}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelFields(field_name="editLabel", arguments=cleared_arguments)

    @classmethod
    def save_feedback(
        cls, label: GetLabelInput, feedbacks: CreateLabelFeedbackInput
    ) -> LabelFeedbackFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "label": {"type": "GetLabelInput!", "value": label},
            "feedbacks": {"type": "CreateLabelFeedbackInput!", "value": feedbacks},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelFeedbackFields(
            field_name="saveFeedback", arguments=cleared_arguments
        )

    @classmethod
    def delete_feedback(cls, label: GetLabelInput) -> OperationResultFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "label": {"type": "GetLabelInput!", "value": label}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return OperationResultFields(
            field_name="deleteFeedback", arguments=cleared_arguments
        )

    @classmethod
    def delete_refinement(cls, label: GetLabelInput) -> OperationResultFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "label": {"type": "GetLabelInput!", "value": label}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return OperationResultFields(
            field_name="deleteRefinement", arguments=cleared_arguments
        )

    @classmethod
    def edit_labelset(
        cls,
        labelset: EditLabelsetInput,
        *,
        info: Optional[EditLabelsetInfoInput] = None
    ) -> LabelsetFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "info": {"type": "EditLabelsetInfoInput", "value": info},
            "labelset": {"type": "EditLabelsetInput!", "value": labelset},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelsetFields(field_name="editLabelset", arguments=cleared_arguments)

    @classmethod
    def create_labelsets(
        cls, dataset: DatasetIdentifierInput, labelsets: CreateNestedLabelsetInput
    ) -> LabelsetFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "dataset": {"type": "DatasetIdentifierInput!", "value": dataset},
            "labelsets": {"type": "CreateNestedLabelsetInput!", "value": labelsets},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelsetFields(field_name="createLabelsets", arguments=cleared_arguments)

    @classmethod
    def create_upload(
        cls, uploader: UploadUploader, upload: UploadPayload
    ) -> UploadResponseFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "uploader": {"type": "UploadUploader!", "value": uploader},
            "upload": {"type": "UploadPayload!", "value": upload},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UploadResponseFields(
            field_name="createUpload", arguments=cleared_arguments
        )

    @classmethod
    def update_upload(cls, upload: UpdateUploadPayload) -> UploadResponseFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "upload": {"type": "UpdateUploadPayload!", "value": upload}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UploadResponseFields(
            field_name="updateUpload", arguments=cleared_arguments
        )

    @classmethod
    def create_dataset(
        cls,
        dataset: CreateDatasetInput,
        *,
        info: Optional[CreateDatasetInfoInput] = None
    ) -> DatasetFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "info": {"type": "CreateDatasetInfoInput", "value": info},
            "dataset": {"type": "CreateDatasetInput!", "value": dataset},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasetFields(field_name="createDataset", arguments=cleared_arguments)

    @classmethod
    def edit_dataset(
        cls, dataset: EditDatasetInput, *, info: Optional[EditDatasetInfoInput] = None
    ) -> DatasetFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "info": {"type": "EditDatasetInfoInput", "value": info},
            "dataset": {"type": "EditDatasetInput!", "value": dataset},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasetFields(field_name="editDataset", arguments=cleared_arguments)

    @classmethod
    def edit_dataset_core(
        cls,
        dataset: EditDatasetCoreFieldsInput,
        *,
        info: Optional[EditDatasetInfoInput] = None
    ) -> DatasetFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "info": {"type": "EditDatasetInfoInput", "value": info},
            "dataset": {"type": "EditDatasetCoreFieldsInput!", "value": dataset},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasetFields(field_name="editDatasetCore", arguments=cleared_arguments)

    @classmethod
    def report_processing_started(
        cls, job: ReportDatasetUpdateInProgressInput
    ) -> OperationResultResponseFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "job": {"type": "ReportDatasetUpdateInProgressInput!", "value": job}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return OperationResultResponseFields(
            field_name="reportProcessingStarted", arguments=cleared_arguments
        )

    @classmethod
    def report_update_failure(
        cls, failure: ReportDatasetUpdateFailureInput
    ) -> OperationResultResponseFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "failure": {"type": "ReportDatasetUpdateFailureInput!", "value": failure}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return OperationResultResponseFields(
            field_name="reportUpdateFailure", arguments=cleared_arguments
        )

    @classmethod
    def edit_dataset_embeddings(
        cls, embeddings: EditDatasetEmbeddingsInput
    ) -> DatasetFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "embeddings": {"type": "EditDatasetEmbeddingsInput!", "value": embeddings}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasetFields(
            field_name="editDatasetEmbeddings", arguments=cleared_arguments
        )

    @classmethod
    def delete_dataset(cls, dataset: DeleteDatasetInput) -> DeleteResultResponseFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "dataset": {"type": "DeleteDatasetInput!", "value": dataset}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteResultResponseFields(
            field_name="deleteDataset", arguments=cleared_arguments
        )

    @classmethod
    def save_corteges(
        cls, dataset: SaveDatasetLabelCortegesInput
    ) -> OperationResultFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "dataset": {"type": "SaveDatasetLabelCortegesInput!", "value": dataset}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return OperationResultFields(
            field_name="saveCorteges", arguments=cleared_arguments
        )

    @classmethod
    def dataset_clustered_heatmap_result(
        cls,
        dataset: DatasetIdentifierInput,
        *,
        error: Optional[ClusteredHeatmapErrorInput] = None,
        heatmap: Optional[ClusteredHeatmapInput] = None
    ) -> OperationResultFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "error": {"type": "ClusteredHeatmapErrorInput", "value": error},
            "heatmap": {"type": "ClusteredHeatmapInput", "value": heatmap},
            "dataset": {"type": "DatasetIdentifierInput!", "value": dataset},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return OperationResultFields(
            field_name="datasetClusteredHeatmapResult", arguments=cleared_arguments
        )

    @classmethod
    def save_embedding_session(
        cls, data: PostSaveEmbeddingSessionInput
    ) -> DatasetModelFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "data": {"type": "PostSaveEmbeddingSessionInput!", "value": data}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasetModelFields(
            field_name="saveEmbeddingSession", arguments=cleared_arguments
        )

    @classmethod
    def modify_labelset_session_data(
        cls,
        dataset: DatasetIdentifierInput,
        action: str,
        session_id: str,
        labelset: LabelsetObjectInput,
    ) -> DatasetModelFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "dataset": {"type": "DatasetIdentifierInput!", "value": dataset},
            "action": {"type": "String!", "value": action},
            "sessionId": {"type": "String!", "value": session_id},
            "labelset": {"type": "LabelsetObjectInput!", "value": labelset},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasetModelFields(
            field_name="modifyLabelsetSessionData", arguments=cleared_arguments
        )

    @classmethod
    def modify_label_session_data(
        cls,
        dataset: DatasetIdentifierInput,
        action: str,
        session_id: str,
        label: LabelObjectInput,
        *,
        selection_key: Optional[str] = None,
        labelset_id: Optional[str] = None
    ) -> DatasetModelFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "dataset": {"type": "DatasetIdentifierInput!", "value": dataset},
            "action": {"type": "String!", "value": action},
            "sessionId": {"type": "String!", "value": session_id},
            "label": {"type": "LabelObjectInput!", "value": label},
            "selectionKey": {"type": "String", "value": selection_key},
            "labelsetId": {"type": "String", "value": labelset_id},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasetModelFields(
            field_name="modifyLabelSessionData", arguments=cleared_arguments
        )

    @classmethod
    def start_async_hc(
        cls, dataset: DatasetIdentifierInput, options: PostClusteredHeatmapInput
    ) -> DatasetAsyncHCStartResponseFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "dataset": {"type": "DatasetIdentifierInput!", "value": dataset},
            "options": {"type": "PostClusteredHeatmapInput!", "value": options},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasetAsyncHCStartResponseFields(
            field_name="startAsyncHC", arguments=cleared_arguments
        )

    @classmethod
    def cancel_async_hc(
        cls, dataset: DatasetIdentifierInput, options: CancelClusteredHeatmapInput
    ) -> DatasetAsyncHCStartResponseFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "dataset": {"type": "DatasetIdentifierInput!", "value": dataset},
            "options": {"type": "CancelClusteredHeatmapInput!", "value": options},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasetAsyncHCStartResponseFields(
            field_name="cancelAsyncHC", arguments=cleared_arguments
        )

    @classmethod
    def configure_debugger(cls, levels: str) -> OperationResultFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "levels": {"type": "String!", "value": levels}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return OperationResultFields(
            field_name="configureDebugger", arguments=cleared_arguments
        )

    @classmethod
    def create_project(cls, project: CreateProjectInput) -> ProjectFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "project": {"type": "CreateProjectInput!", "value": project}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectFields(field_name="createProject", arguments=cleared_arguments)

    @classmethod
    def edit_project(cls, project: EditProjectInput) -> ProjectFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "project": {"type": "EditProjectInput!", "value": project}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectFields(field_name="editProject", arguments=cleared_arguments)

    @classmethod
    def add_role(cls, permission: AddPermissionInput) -> ProjectPermissionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "permission": {"type": "AddPermissionInput!", "value": permission}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectPermissionFields(
            field_name="addRole", arguments=cleared_arguments
        )

    @classmethod
    def invite_by_email(cls, permission: InviteByEmailInput) -> ProjectPermissionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "permission": {"type": "InviteByEmailInput!", "value": permission}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectPermissionFields(
            field_name="inviteByEmail", arguments=cleared_arguments
        )

    @classmethod
    def delete_role(
        cls, permission: RemovePermissionInput
    ) -> DeleteResultResponseFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "permission": {"type": "RemovePermissionInput!", "value": permission}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteResultResponseFields(
            field_name="deleteRole", arguments=cleared_arguments
        )

    @classmethod
    def delete_project(cls, project: DeleteProjectInput) -> DeleteProjectResponseFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "project": {"type": "DeleteProjectInput!", "value": project}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteProjectResponseFields(
            field_name="deleteProject", arguments=cleared_arguments
        )

    @classmethod
    def approve_invitation(cls) -> ApproveInvitationResponseFields:
        return ApproveInvitationResponseFields(field_name="approveInvitation")

    @classmethod
    def create_publication(cls, project: CreatePublicationInput) -> ProjectFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "project": {"type": "CreatePublicationInput!", "value": project}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectFields(
            field_name="createPublication", arguments=cleared_arguments
        )

    @classmethod
    def review_project_request(
        cls, project: ReviewProjectRequestInput
    ) -> ProjectFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "project": {"type": "ReviewProjectRequestInput!", "value": project}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectFields(
            field_name="reviewProjectRequest", arguments=cleared_arguments
        )

    @classmethod
    def decline_project_review(
        cls, project: DeclineProjectReviewInput
    ) -> ProjectFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "project": {"type": "DeclineProjectReviewInput!", "value": project}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectFields(
            field_name="declineProjectReview", arguments=cleared_arguments
        )

    @classmethod
    def cancel_project_review(cls, project: CancelProjectReviewInput) -> ProjectFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "project": {"type": "CancelProjectReviewInput!", "value": project}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ProjectFields(
            field_name="cancelProjectReview", arguments=cleared_arguments
        )
