# Generated by ariadne-codegen

from typing import Any, Dict, Optional, Union

from .base_operation import GraphQLField
from .custom_typing_fields import (
    AnnotationsObjectGraphQLField,
    ApproveInvitationResponseGraphQLField,
    CapUserGraphQLField,
    ClusteredHeatmapGraphQLField,
    ComplexSelectionGraphQLField,
    DatasetAsyncHCStartResponseGraphQLField,
    DatasetDownloadUrlsResponseGraphQLField,
    DatasetErrorGQLGraphQLField,
    DatasetGraphQLField,
    DatasetLookupResponseGraphQLField,
    DatasetMetadataCountResponseGraphQLField,
    DatasetModelGraphQLField,
    DatasetSeuratStatusResponseGraphQLField,
    DatasetsHighlightGraphQLField,
    DatasetUpdateJobGraphQLField,
    DatasetValidationGraphQLField,
    DatasetValidationResultDataGraphQLField,
    DatasetValidatioNResultErrorsGraphQLField,
    DatasetValidationResultGraphQLField,
    DeleteProjectResponseGraphQLField,
    DeleteResultResponseGraphQLField,
    EmbeddingClustersGraphQLField,
    EmbeddingClusterTypeGraphQLField,
    EmbeddingDataAnnotationItemGraphQLField,
    EmbeddingDataGraphQLField,
    EmbeddingGroupGraphQLField,
    EmbeddingMapGraphQLField,
    ExplanationDataUnion,
    FeedbackExplanationDataCommentGraphQLField,
    FeedbackExplanationDataMergeGraphQLField,
    FeedbackExplanationDataRefineChangesGraphQLField,
    FeedbackExplanationDataRefineGraphQLField,
    FeedbackExplanationDataSplitGraphQLField,
    FeedbackExplanationDataSplitLabelsGraphQLField,
    GeneRowGraphQLField,
    GenesObjectGraphQLField,
    GenesRowsGraphQLField,
    GroupedMetadataResponseGraphQLField,
    HeatmapGraphQLField,
    HeatmapTopGenesBySelectionGraphQLField,
    HighlyVariableGeneRowGraphQLField,
    HomepageStatisticsResponseGraphQLField,
    IsInSelectionsObjectGraphQLField,
    LabelCategoryGraphQLField,
    LabelFeedbackExplanationGraphQLField,
    LabelFeedbackGraphQLField,
    LabelGraphQLField,
    LabelModelGraphQLField,
    LabelRelationGraphQLField,
    LabelScoresGraphQLField,
    LabelsetGraphQLField,
    LabelsetModelGraphQLField,
    LabelsetValidationResultErrorsGraphQLField,
    LabelsetValidationResultGraphQLField,
    LabelSynonymGraphQLField,
    LabelValidationResultErrorsGraphQLField,
    LabelValidationResultGraphQLField,
    ObsDetailsGraphQLField,
    ObsDetailsResponsePointGraphQLField,
    ObsIDSObjectGraphQLField,
    OperationResultGraphQLField,
    OperationResultResponseGraphQLField,
    PolygonCoordGraphQLField,
    ProjectGraphQLField,
    ProjectPermissionGraphQLField,
    SankeyDataLinkGraphQLField,
    SankeyDataNodeGraphQLField,
    SankeyGraphQLField,
    ScoresObjectGraphQLField,
    StandardResponseGraphQLField,
    StateResponseGraphQLField,
    TissueLowerTermGraphQLField,
    TissueTermGraphQLField,
    UploadErrorItemGraphQLField,
    UploadResponseGraphQLField,
)
from .input_types import (
    GetDatasetClustersDataInput,
    GetDatasetClustersObsInput,
    GetDatasetEmbeddingDataInput,
    GetDatasetEmbeddingSelectionObsInput,
    GetEmbeddingDiffInput,
    GetEmbeddingDiffKeygenInput,
    GetEmbeddingsObsCountInput,
    GetGenesBySelectionCsvInput,
    GetGenesBySelectionInput,
    GetGenesInput,
    GetHighlyVariableGenesCsvInput,
    GetHighlyVariableGenesInput,
    GetObsDetailsInput,
    GetSankeyDiagramInput,
    ListLabelFeedbackOptions,
    PostClusteredHeatmapInput,
    PostHeatmapInput,
    PostSingleSelectionKeyInput,
    ValidateSelectionInput,
)


class AnnotationsObjectFields(GraphQLField):
    data: "AnnotationsObjectGraphQLField" = AnnotationsObjectGraphQLField("data")

    def fields(
        self, *subfields: AnnotationsObjectGraphQLField
    ) -> "AnnotationsObjectFields":
        """Subfields should come from the AnnotationsObjectFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AnnotationsObjectFields":
        self._alias = alias
        return self


class ApproveInvitationResponseFields(GraphQLField):
    msg: "ApproveInvitationResponseGraphQLField" = (
        ApproveInvitationResponseGraphQLField("msg")
    )

    def fields(
        self, *subfields: ApproveInvitationResponseGraphQLField
    ) -> "ApproveInvitationResponseFields":
        """Subfields should come from the ApproveInvitationResponseFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ApproveInvitationResponseFields":
        self._alias = alias
        return self


class CapUserFields(GraphQLField):
    uid: "CapUserGraphQLField" = CapUserGraphQLField("uid")
    display_name: "CapUserGraphQLField" = CapUserGraphQLField("displayName")
    temp_display_name: "CapUserGraphQLField" = CapUserGraphQLField("tempDisplayName")
    avatar_url: "CapUserGraphQLField" = CapUserGraphQLField("avatarUrl")
    bio: "CapUserGraphQLField" = CapUserGraphQLField("bio")
    email: "CapUserGraphQLField" = CapUserGraphQLField("email")
    location: "CapUserGraphQLField" = CapUserGraphQLField("location")
    first_name: "CapUserGraphQLField" = CapUserGraphQLField("firstName")
    last_name: "CapUserGraphQLField" = CapUserGraphQLField("lastName")
    institution: "CapUserGraphQLField" = CapUserGraphQLField("institution")
    lab_name: "CapUserGraphQLField" = CapUserGraphQLField("labName")
    lab_url: "CapUserGraphQLField" = CapUserGraphQLField("labUrl")
    orcid_id: "CapUserGraphQLField" = CapUserGraphQLField("orcidId")
    username: "CapUserGraphQLField" = CapUserGraphQLField("username")

    @classmethod
    def projects(cls) -> "ProjectFields":
        return ProjectFields("projects")

    is_super_user: "CapUserGraphQLField" = CapUserGraphQLField("isSuperUser")

    def fields(
        self, *subfields: Union[CapUserGraphQLField, "ProjectFields"]
    ) -> "CapUserFields":
        """Subfields should come from the CapUserFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CapUserFields":
        self._alias = alias
        return self


class ClusteredHeatmapFields(GraphQLField):
    @classmethod
    def annotations(cls) -> "AnnotationsObjectFields":
        return AnnotationsObjectFields("annotations")

    @classmethod
    def genes(cls) -> "GenesObjectFields":
        return GenesObjectFields("genes")

    @classmethod
    def obs_ids(cls) -> "ObsIDSObjectFields":
        return ObsIDSObjectFields("obs_ids")

    @classmethod
    def scores(cls) -> "ScoresObjectFields":
        return ScoresObjectFields("scores")

    def fields(
        self,
        *subfields: Union[
            ClusteredHeatmapGraphQLField,
            "AnnotationsObjectFields",
            "GenesObjectFields",
            "ObsIDSObjectFields",
            "ScoresObjectFields",
        ]
    ) -> "ClusteredHeatmapFields":
        """Subfields should come from the ClusteredHeatmapFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ClusteredHeatmapFields":
        self._alias = alias
        return self


class ComplexSelectionFields(GraphQLField):
    msg: "ComplexSelectionGraphQLField" = ComplexSelectionGraphQLField("msg")
    selection_key: "ComplexSelectionGraphQLField" = ComplexSelectionGraphQLField(
        "selectionKey"
    )
    points_count: "ComplexSelectionGraphQLField" = ComplexSelectionGraphQLField(
        "pointsCount"
    )

    def fields(
        self, *subfields: ComplexSelectionGraphQLField
    ) -> "ComplexSelectionFields":
        """Subfields should come from the ComplexSelectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ComplexSelectionFields":
        self._alias = alias
        return self


class DatasetFields(GraphQLField):
    id: "DatasetGraphQLField" = DatasetGraphQLField("id")
    project_id: "DatasetGraphQLField" = DatasetGraphQLField("projectId")
    created_at: "DatasetGraphQLField" = DatasetGraphQLField("createdAt")
    updated_at: "DatasetGraphQLField" = DatasetGraphQLField("updatedAt")
    name: "DatasetGraphQLField" = DatasetGraphQLField("name")
    description: "DatasetGraphQLField" = DatasetGraphQLField("description")
    is_ann_data_up_to_date: "DatasetGraphQLField" = DatasetGraphQLField(
        "isAnnDataUpToDate"
    )
    is_ann_data_url_up_to_date: "DatasetGraphQLField" = DatasetGraphQLField(
        "isAnnDataUrlUpToDate"
    )
    is_embeddings_up_to_date: "DatasetGraphQLField" = DatasetGraphQLField(
        "isEmbeddingsUpToDate"
    )
    dataset_type: "DatasetGraphQLField" = DatasetGraphQLField("datasetType")
    cell_count: "DatasetGraphQLField" = DatasetGraphQLField("cellCount")
    gene_count: "DatasetGraphQLField" = DatasetGraphQLField("geneCount")
    default_embedding: "DatasetGraphQLField" = DatasetGraphQLField("defaultEmbedding")

    @classmethod
    def errors(cls) -> "DatasetErrorGQLFields":
        return DatasetErrorGQLFields("errors")

    @classmethod
    def project(cls) -> "ProjectFields":
        return ProjectFields("project")

    @classmethod
    def last_update_job(cls) -> "DatasetUpdateJobFields":
        return DatasetUpdateJobFields("last_update_job")

    @classmethod
    def labelsets(cls) -> "LabelsetFields":
        return LabelsetFields("labelsets")

    @classmethod
    def seurat_status(cls) -> "DatasetSeuratStatusResponseFields":
        return DatasetSeuratStatusResponseFields("seurat_status")

    embeddings_cell_count: "DatasetGraphQLField" = DatasetGraphQLField(
        "embeddingsCellCount"
    )

    @classmethod
    def embeddings(cls) -> "EmbeddingGroupFields":
        return EmbeddingGroupFields("embeddings")

    @classmethod
    def embedding_data(
        cls, options: GetDatasetEmbeddingDataInput
    ) -> "EmbeddingDataFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "options": {"type": "GetDatasetEmbeddingDataInput!", "value": options}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return EmbeddingDataFields("embedding_data", arguments=cleared_arguments)

    @classmethod
    def embedding_selection_obs(
        cls, selection: GetDatasetEmbeddingSelectionObsInput
    ) -> "DatasetGraphQLField":
        arguments: Dict[str, Dict[str, Any]] = {
            "selection": {
                "type": "GetDatasetEmbeddingSelectionObsInput!",
                "value": selection,
            }
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasetGraphQLField(
            "embedding_selection_obs", arguments=cleared_arguments
        )

    @classmethod
    def embedding_clusters(
        cls, cluster: GetDatasetClustersDataInput
    ) -> "EmbeddingClustersFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "cluster": {"type": "GetDatasetClustersDataInput!", "value": cluster}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return EmbeddingClustersFields(
            "embedding_clusters", arguments=cleared_arguments
        )

    @classmethod
    def embedding_cluster_types(cls) -> "EmbeddingClusterTypeFields":
        return EmbeddingClusterTypeFields("embedding_cluster_types")

    @classmethod
    def embedding_clusters_obs(
        cls, cluster: GetDatasetClustersObsInput
    ) -> "DatasetGraphQLField":
        arguments: Dict[str, Dict[str, Any]] = {
            "cluster": {"type": "GetDatasetClustersObsInput!", "value": cluster}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasetGraphQLField(
            "embedding_clusters_obs", arguments=cleared_arguments
        )

    @classmethod
    def embedding_diff(cls, options: GetEmbeddingDiffInput) -> "DatasetGraphQLField":
        arguments: Dict[str, Dict[str, Any]] = {
            "options": {"type": "GetEmbeddingDiffInput!", "value": options}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasetGraphQLField("embedding_diff", arguments=cleared_arguments)

    @classmethod
    def embedding_single_selection_key(
        cls, options: PostSingleSelectionKeyInput
    ) -> "DatasetGraphQLField":
        arguments: Dict[str, Dict[str, Any]] = {
            "options": {"type": "PostSingleSelectionKeyInput!", "value": options}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasetGraphQLField(
            "embedding_single_selection_key", arguments=cleared_arguments
        )

    @classmethod
    def embedding_diff_heat_map(cls, options: PostHeatmapInput) -> "HeatmapFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "options": {"type": "PostHeatmapInput!", "value": options}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return HeatmapFields("embedding_diff_heat_map", arguments=cleared_arguments)

    @classmethod
    def embedding_clustered_heat_map(
        cls, options: PostClusteredHeatmapInput
    ) -> "ClusteredHeatmapFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "options": {"type": "PostClusteredHeatmapInput!", "value": options}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ClusteredHeatmapFields(
            "embedding_clustered_heat_map", arguments=cleared_arguments
        )

    @classmethod
    def embedding_highly_variable_genes_csv(
        cls, options: GetHighlyVariableGenesCsvInput
    ) -> "DatasetGraphQLField":
        arguments: Dict[str, Dict[str, Any]] = {
            "options": {"type": "GetHighlyVariableGenesCsvInput!", "value": options}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasetGraphQLField(
            "embedding_highly_variable_genes_csv", arguments=cleared_arguments
        )

    @classmethod
    def embedding_obs_details(cls, options: GetObsDetailsInput) -> "ObsDetailsFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "options": {"type": "GetObsDetailsInput!", "value": options}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ObsDetailsFields("embedding_obs_details", arguments=cleared_arguments)

    @classmethod
    def embedding_diff_genes_by_selection_csv(
        cls, options: GetGenesBySelectionCsvInput
    ) -> "DatasetGraphQLField":
        arguments: Dict[str, Dict[str, Any]] = {
            "options": {"type": "GetGenesBySelectionCsvInput!", "value": options}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasetGraphQLField(
            "embedding_diff_genes_by_selection_csv", arguments=cleared_arguments
        )

    @classmethod
    def embedding_diff_genes(cls, options: GetGenesInput) -> "GeneRowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "options": {"type": "GetGenesInput!", "value": options}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GeneRowFields("embedding_diff_genes", arguments=cleared_arguments)

    @classmethod
    def embedding_highly_variable_genes(
        cls, options: GetHighlyVariableGenesInput
    ) -> "HighlyVariableGeneRowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "options": {"type": "GetHighlyVariableGenesInput!", "value": options}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return HighlyVariableGeneRowFields(
            "embedding_highly_variable_genes", arguments=cleared_arguments
        )

    @classmethod
    def embedding_diff_genes_by_selection(
        cls, options: GetGenesBySelectionInput
    ) -> "GenesRowsFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "options": {"type": "GetGenesBySelectionInput!", "value": options}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GenesRowsFields(
            "embedding_diff_genes_by_selection", arguments=cleared_arguments
        )

    @classmethod
    def embedding_diff_keygen(
        cls, options: GetEmbeddingDiffKeygenInput
    ) -> "DatasetGraphQLField":
        arguments: Dict[str, Dict[str, Any]] = {
            "options": {"type": "GetEmbeddingDiffKeygenInput!", "value": options}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasetGraphQLField("embedding_diff_keygen", arguments=cleared_arguments)

    @classmethod
    def embedding_validate_selection(
        cls, selection: ValidateSelectionInput
    ) -> "ComplexSelectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "selection": {"type": "ValidateSelectionInput!", "value": selection}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ComplexSelectionFields(
            "embedding_validate_selection", arguments=cleared_arguments
        )

    @classmethod
    def embeddings_obs_count(
        cls, selection: GetEmbeddingsObsCountInput
    ) -> "DatasetGraphQLField":
        arguments: Dict[str, Dict[str, Any]] = {
            "selection": {"type": "GetEmbeddingsObsCountInput!", "value": selection}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasetGraphQLField("embeddings_obs_count", arguments=cleared_arguments)

    @classmethod
    def embeddings_sankey_diagram(
        cls, options: GetSankeyDiagramInput
    ) -> "SankeyFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "options": {"type": "GetSankeyDiagramInput!", "value": options}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SankeyFields("embeddings_sankey_diagram", arguments=cleared_arguments)

    @classmethod
    def embeddings_molecular_data(cls) -> "StandardResponseFields":
        return StandardResponseFields("embeddings_molecular_data")

    def fields(
        self,
        *subfields: Union[
            DatasetGraphQLField,
            "ClusteredHeatmapFields",
            "ComplexSelectionFields",
            "DatasetErrorGQLFields",
            "DatasetSeuratStatusResponseFields",
            "DatasetUpdateJobFields",
            "EmbeddingClusterTypeFields",
            "EmbeddingClustersFields",
            "EmbeddingDataFields",
            "EmbeddingGroupFields",
            "GeneRowFields",
            "GenesRowsFields",
            "HeatmapFields",
            "HighlyVariableGeneRowFields",
            "LabelsetFields",
            "ObsDetailsFields",
            "ProjectFields",
            "SankeyFields",
            "StandardResponseFields",
        ]
    ) -> "DatasetFields":
        """Subfields should come from the DatasetFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DatasetFields":
        self._alias = alias
        return self


class DatasetAsyncHCStartResponseFields(GraphQLField):
    error: "DatasetAsyncHCStartResponseGraphQLField" = (
        DatasetAsyncHCStartResponseGraphQLField("error")
    )
    message: "DatasetAsyncHCStartResponseGraphQLField" = (
        DatasetAsyncHCStartResponseGraphQLField("message")
    )
    task_id: "DatasetAsyncHCStartResponseGraphQLField" = (
        DatasetAsyncHCStartResponseGraphQLField("taskId")
    )
    request_id: "DatasetAsyncHCStartResponseGraphQLField" = (
        DatasetAsyncHCStartResponseGraphQLField("requestId")
    )

    def fields(
        self, *subfields: DatasetAsyncHCStartResponseGraphQLField
    ) -> "DatasetAsyncHCStartResponseFields":
        """Subfields should come from the DatasetAsyncHCStartResponseFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DatasetAsyncHCStartResponseFields":
        self._alias = alias
        return self


class DatasetDownloadUrlsResponseFields(GraphQLField):
    seurat_url: "DatasetDownloadUrlsResponseGraphQLField" = (
        DatasetDownloadUrlsResponseGraphQLField("seuratUrl")
    )
    ann_data_url: "DatasetDownloadUrlsResponseGraphQLField" = (
        DatasetDownloadUrlsResponseGraphQLField("annDataUrl")
    )
    cap_json_url_zip: "DatasetDownloadUrlsResponseGraphQLField" = (
        DatasetDownloadUrlsResponseGraphQLField("capJsonUrlZip")
    )
    cap_json_url_tar: "DatasetDownloadUrlsResponseGraphQLField" = (
        DatasetDownloadUrlsResponseGraphQLField("capJsonUrlTar")
    )
    is_ann_data_up_to_date: "DatasetDownloadUrlsResponseGraphQLField" = (
        DatasetDownloadUrlsResponseGraphQLField("isAnnDataUpToDate")
    )
    is_ann_data_url_up_to_date: "DatasetDownloadUrlsResponseGraphQLField" = (
        DatasetDownloadUrlsResponseGraphQLField("isAnnDataUrlUpToDate")
    )

    def fields(
        self, *subfields: DatasetDownloadUrlsResponseGraphQLField
    ) -> "DatasetDownloadUrlsResponseFields":
        """Subfields should come from the DatasetDownloadUrlsResponseFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DatasetDownloadUrlsResponseFields":
        self._alias = alias
        return self


class DatasetErrorGQLFields(GraphQLField):
    id: "DatasetErrorGQLGraphQLField" = DatasetErrorGQLGraphQLField("id")
    type: "DatasetErrorGQLGraphQLField" = DatasetErrorGQLGraphQLField("type")
    message: "DatasetErrorGQLGraphQLField" = DatasetErrorGQLGraphQLField("message")
    info: "DatasetErrorGQLGraphQLField" = DatasetErrorGQLGraphQLField("info")

    def fields(
        self, *subfields: DatasetErrorGQLGraphQLField
    ) -> "DatasetErrorGQLFields":
        """Subfields should come from the DatasetErrorGQLFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DatasetErrorGQLFields":
        self._alias = alias
        return self


class DatasetLookupResponseFields(GraphQLField):
    id: "DatasetLookupResponseGraphQLField" = DatasetLookupResponseGraphQLField("id")
    project_id: "DatasetLookupResponseGraphQLField" = DatasetLookupResponseGraphQLField(
        "projectId"
    )
    created_at: "DatasetLookupResponseGraphQLField" = DatasetLookupResponseGraphQLField(
        "createdAt"
    )
    updated_at: "DatasetLookupResponseGraphQLField" = DatasetLookupResponseGraphQLField(
        "updatedAt"
    )
    name: "DatasetLookupResponseGraphQLField" = DatasetLookupResponseGraphQLField(
        "name"
    )
    dataset_type: "DatasetLookupResponseGraphQLField" = (
        DatasetLookupResponseGraphQLField("datasetType")
    )
    is_ann_data_up_to_date: "DatasetLookupResponseGraphQLField" = (
        DatasetLookupResponseGraphQLField("isAnnDataUpToDate")
    )
    is_ann_data_url_up_to_date: "DatasetLookupResponseGraphQLField" = (
        DatasetLookupResponseGraphQLField("isAnnDataUrlUpToDate")
    )
    is_embeddings_up_to_date: "DatasetLookupResponseGraphQLField" = (
        DatasetLookupResponseGraphQLField("isEmbeddingsUpToDate")
    )
    description: "DatasetLookupResponseGraphQLField" = (
        DatasetLookupResponseGraphQLField("description")
    )
    raw_data_url: "DatasetLookupResponseGraphQLField" = (
        DatasetLookupResponseGraphQLField("rawDataUrl")
    )
    ann_data_url: "DatasetLookupResponseGraphQLField" = (
        DatasetLookupResponseGraphQLField("annDataUrl")
    )

    @classmethod
    def errors(cls) -> "DatasetErrorGQLFields":
        return DatasetErrorGQLFields("errors")

    cell_count: "DatasetLookupResponseGraphQLField" = DatasetLookupResponseGraphQLField(
        "cellCount"
    )
    gene_count: "DatasetLookupResponseGraphQLField" = DatasetLookupResponseGraphQLField(
        "geneCount"
    )

    @classmethod
    def highlight(cls) -> "DatasetsHighlightFields":
        return DatasetsHighlightFields("highlight")

    @classmethod
    def project(cls) -> "ProjectFields":
        return ProjectFields("project")

    @classmethod
    def labelsets(cls) -> "LabelsetFields":
        return LabelsetFields("labelsets")

    @classmethod
    def last_update_job(cls) -> "DatasetUpdateJobFields":
        return DatasetUpdateJobFields("last_update_job")

    def fields(
        self,
        *subfields: Union[
            DatasetLookupResponseGraphQLField,
            "DatasetErrorGQLFields",
            "DatasetUpdateJobFields",
            "DatasetsHighlightFields",
            "LabelsetFields",
            "ProjectFields",
        ]
    ) -> "DatasetLookupResponseFields":
        """Subfields should come from the DatasetLookupResponseFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DatasetLookupResponseFields":
        self._alias = alias
        return self


class DatasetMetadataCountResponseFields(GraphQLField):
    count: "DatasetMetadataCountResponseGraphQLField" = (
        DatasetMetadataCountResponseGraphQLField("count")
    )
    field_value: "DatasetMetadataCountResponseGraphQLField" = (
        DatasetMetadataCountResponseGraphQLField("fieldValue")
    )

    def fields(
        self, *subfields: DatasetMetadataCountResponseGraphQLField
    ) -> "DatasetMetadataCountResponseFields":
        """Subfields should come from the DatasetMetadataCountResponseFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DatasetMetadataCountResponseFields":
        self._alias = alias
        return self


class DatasetModelFields(GraphQLField):
    cell_count: "DatasetModelGraphQLField" = DatasetModelGraphQLField("cellCount")
    dataset_type: "DatasetModelGraphQLField" = DatasetModelGraphQLField("datasetType")
    description: "DatasetModelGraphQLField" = DatasetModelGraphQLField("description")
    id: "DatasetModelGraphQLField" = DatasetModelGraphQLField("id")

    @classmethod
    def labelsets(cls) -> "LabelsetModelFields":
        return LabelsetModelFields("labelsets")

    name: "DatasetModelGraphQLField" = DatasetModelGraphQLField("name")

    def fields(
        self, *subfields: Union[DatasetModelGraphQLField, "LabelsetModelFields"]
    ) -> "DatasetModelFields":
        """Subfields should come from the DatasetModelFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DatasetModelFields":
        self._alias = alias
        return self


class DatasetSeuratStatusResponseFields(GraphQLField):
    status: "DatasetSeuratStatusResponseGraphQLField" = (
        DatasetSeuratStatusResponseGraphQLField("status")
    )
    failed_reason: "DatasetSeuratStatusResponseGraphQLField" = (
        DatasetSeuratStatusResponseGraphQLField("failedReason")
    )
    processed_on: "DatasetSeuratStatusResponseGraphQLField" = (
        DatasetSeuratStatusResponseGraphQLField("processedOn")
    )
    timestamp: "DatasetSeuratStatusResponseGraphQLField" = (
        DatasetSeuratStatusResponseGraphQLField("timestamp")
    )

    def fields(
        self, *subfields: DatasetSeuratStatusResponseGraphQLField
    ) -> "DatasetSeuratStatusResponseFields":
        """Subfields should come from the DatasetSeuratStatusResponseFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DatasetSeuratStatusResponseFields":
        self._alias = alias
        return self


class DatasetUpdateJobFields(GraphQLField):
    status: "DatasetUpdateJobGraphQLField" = DatasetUpdateJobGraphQLField("status")
    reason: "DatasetUpdateJobGraphQLField" = DatasetUpdateJobGraphQLField("reason")
    rolled_back_at: "DatasetUpdateJobGraphQLField" = DatasetUpdateJobGraphQLField(
        "rolledBackAt"
    )
    processed_at: "DatasetUpdateJobGraphQLField" = DatasetUpdateJobGraphQLField(
        "processedAt"
    )

    def fields(
        self, *subfields: DatasetUpdateJobGraphQLField
    ) -> "DatasetUpdateJobFields":
        """Subfields should come from the DatasetUpdateJobFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DatasetUpdateJobFields":
        self._alias = alias
        return self


class DatasetValidatioNResultErrorsFields(GraphQLField):
    name: "DatasetValidatioNResultErrorsGraphQLField" = (
        DatasetValidatioNResultErrorsGraphQLField("name")
    )
    description: "DatasetValidatioNResultErrorsGraphQLField" = (
        DatasetValidatioNResultErrorsGraphQLField("description")
    )
    labelsets_count: "DatasetValidatioNResultErrorsGraphQLField" = (
        DatasetValidatioNResultErrorsGraphQLField("labelsetsCount")
    )

    def fields(
        self, *subfields: DatasetValidatioNResultErrorsGraphQLField
    ) -> "DatasetValidatioNResultErrorsFields":
        """Subfields should come from the DatasetValidatioNResultErrorsFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DatasetValidatioNResultErrorsFields":
        self._alias = alias
        return self


class DatasetValidationFields(GraphQLField):
    msg: "DatasetValidationGraphQLField" = DatasetValidationGraphQLField("msg")
    error: "DatasetValidationGraphQLField" = DatasetValidationGraphQLField("error")

    @classmethod
    def data(cls) -> "DatasetValidationResultFields":
        return DatasetValidationResultFields("data")

    def fields(
        self,
        *subfields: Union[
            DatasetValidationGraphQLField, "DatasetValidationResultFields"
        ]
    ) -> "DatasetValidationFields":
        """Subfields should come from the DatasetValidationFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DatasetValidationFields":
        self._alias = alias
        return self


class DatasetValidationResultFields(GraphQLField):
    @classmethod
    def dataset(cls) -> "DatasetValidationResultDataFields":
        return DatasetValidationResultDataFields("dataset")

    def fields(
        self,
        *subfields: Union[
            DatasetValidationResultGraphQLField, "DatasetValidationResultDataFields"
        ]
    ) -> "DatasetValidationResultFields":
        """Subfields should come from the DatasetValidationResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DatasetValidationResultFields":
        self._alias = alias
        return self


class DatasetValidationResultDataFields(GraphQLField):
    @classmethod
    def errors(cls) -> "DatasetValidatioNResultErrorsFields":
        return DatasetValidatioNResultErrorsFields("errors")

    @classmethod
    def labelsets(cls) -> "LabelsetValidationResultFields":
        return LabelsetValidationResultFields("labelsets")

    def fields(
        self,
        *subfields: Union[
            DatasetValidationResultDataGraphQLField,
            "DatasetValidatioNResultErrorsFields",
            "LabelsetValidationResultFields",
        ]
    ) -> "DatasetValidationResultDataFields":
        """Subfields should come from the DatasetValidationResultDataFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DatasetValidationResultDataFields":
        self._alias = alias
        return self


class DatasetsHighlightFields(GraphQLField):
    name: "DatasetsHighlightGraphQLField" = DatasetsHighlightGraphQLField("name")
    project_name: "DatasetsHighlightGraphQLField" = DatasetsHighlightGraphQLField(
        "projectName"
    )
    project_description: "DatasetsHighlightGraphQLField" = (
        DatasetsHighlightGraphQLField("projectDescription")
    )

    def fields(
        self, *subfields: DatasetsHighlightGraphQLField
    ) -> "DatasetsHighlightFields":
        """Subfields should come from the DatasetsHighlightFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DatasetsHighlightFields":
        self._alias = alias
        return self


class DeleteProjectResponseFields(GraphQLField):
    project_id: "DeleteProjectResponseGraphQLField" = DeleteProjectResponseGraphQLField(
        "projectId"
    )

    def fields(
        self, *subfields: DeleteProjectResponseGraphQLField
    ) -> "DeleteProjectResponseFields":
        """Subfields should come from the DeleteProjectResponseFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteProjectResponseFields":
        self._alias = alias
        return self


class DeleteResultResponseFields(GraphQLField):
    msg: "DeleteResultResponseGraphQLField" = DeleteResultResponseGraphQLField("msg")

    def fields(
        self, *subfields: DeleteResultResponseGraphQLField
    ) -> "DeleteResultResponseFields":
        """Subfields should come from the DeleteResultResponseFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteResultResponseFields":
        self._alias = alias
        return self


class EmbeddingClusterTypeFields(GraphQLField):
    name: "EmbeddingClusterTypeGraphQLField" = EmbeddingClusterTypeGraphQLField("name")
    cell_count: "EmbeddingClusterTypeGraphQLField" = EmbeddingClusterTypeGraphQLField(
        "cellCount"
    )
    groups_count: "EmbeddingClusterTypeGraphQLField" = EmbeddingClusterTypeGraphQLField(
        "groupsCount"
    )

    def fields(
        self, *subfields: EmbeddingClusterTypeGraphQLField
    ) -> "EmbeddingClusterTypeFields":
        """Subfields should come from the EmbeddingClusterTypeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EmbeddingClusterTypeFields":
        self._alias = alias
        return self


class EmbeddingClustersFields(GraphQLField):
    cell_count: "EmbeddingClustersGraphQLField" = EmbeddingClustersGraphQLField(
        "cellCount"
    )
    color: "EmbeddingClustersGraphQLField" = EmbeddingClustersGraphQLField("color")
    cluster_id: "EmbeddingClustersGraphQLField" = EmbeddingClustersGraphQLField(
        "clusterId"
    )

    def fields(
        self, *subfields: EmbeddingClustersGraphQLField
    ) -> "EmbeddingClustersFields":
        """Subfields should come from the EmbeddingClustersFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EmbeddingClustersFields":
        self._alias = alias
        return self


class EmbeddingDataFields(GraphQLField):
    obs_ids: "EmbeddingDataGraphQLField" = EmbeddingDataGraphQLField("obsIds")

    @classmethod
    def embeddings(cls) -> "EmbeddingMapFields":
        return EmbeddingMapFields("embeddings")

    gene_expression: "EmbeddingDataGraphQLField" = EmbeddingDataGraphQLField(
        "geneExpression"
    )
    in_selection_major: "EmbeddingDataGraphQLField" = EmbeddingDataGraphQLField(
        "inSelectionMajor"
    )
    in_selection_minor: "EmbeddingDataGraphQLField" = EmbeddingDataGraphQLField(
        "inSelectionMinor"
    )

    @classmethod
    def annotations(cls) -> "EmbeddingDataAnnotationItemFields":
        return EmbeddingDataAnnotationItemFields("annotations")

    def fields(
        self,
        *subfields: Union[
            EmbeddingDataGraphQLField,
            "EmbeddingDataAnnotationItemFields",
            "EmbeddingMapFields",
        ]
    ) -> "EmbeddingDataFields":
        """Subfields should come from the EmbeddingDataFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EmbeddingDataFields":
        self._alias = alias
        return self


class EmbeddingDataAnnotationItemFields(GraphQLField):
    name: "EmbeddingDataAnnotationItemGraphQLField" = (
        EmbeddingDataAnnotationItemGraphQLField("name")
    )
    items: "EmbeddingDataAnnotationItemGraphQLField" = (
        EmbeddingDataAnnotationItemGraphQLField("items")
    )
    label_ids: "EmbeddingDataAnnotationItemGraphQLField" = (
        EmbeddingDataAnnotationItemGraphQLField("labelIds")
    )

    def fields(
        self, *subfields: EmbeddingDataAnnotationItemGraphQLField
    ) -> "EmbeddingDataAnnotationItemFields":
        """Subfields should come from the EmbeddingDataAnnotationItemFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EmbeddingDataAnnotationItemFields":
        self._alias = alias
        return self


class EmbeddingGroupFields(GraphQLField):
    cell_count: "EmbeddingGroupGraphQLField" = EmbeddingGroupGraphQLField("cellCount")
    name: "EmbeddingGroupGraphQLField" = EmbeddingGroupGraphQLField("name")

    def fields(self, *subfields: EmbeddingGroupGraphQLField) -> "EmbeddingGroupFields":
        """Subfields should come from the EmbeddingGroupFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EmbeddingGroupFields":
        self._alias = alias
        return self


class EmbeddingMapFields(GraphQLField):
    x: "EmbeddingMapGraphQLField" = EmbeddingMapGraphQLField("x")
    y: "EmbeddingMapGraphQLField" = EmbeddingMapGraphQLField("y")

    def fields(self, *subfields: EmbeddingMapGraphQLField) -> "EmbeddingMapFields":
        """Subfields should come from the EmbeddingMapFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EmbeddingMapFields":
        self._alias = alias
        return self


class FeedbackExplanationDataCommentFields(GraphQLField):
    comment: "FeedbackExplanationDataCommentGraphQLField" = (
        FeedbackExplanationDataCommentGraphQLField("comment")
    )

    def fields(
        self, *subfields: FeedbackExplanationDataCommentGraphQLField
    ) -> "FeedbackExplanationDataCommentFields":
        """Subfields should come from the FeedbackExplanationDataCommentFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "FeedbackExplanationDataCommentFields":
        self._alias = alias
        return self


class FeedbackExplanationDataMergeFields(GraphQLField):
    comment: "FeedbackExplanationDataMergeGraphQLField" = (
        FeedbackExplanationDataMergeGraphQLField("comment")
    )
    label_ids: "FeedbackExplanationDataMergeGraphQLField" = (
        FeedbackExplanationDataMergeGraphQLField("labelIds")
    )

    @classmethod
    def labels(cls) -> "LabelFields":
        return LabelFields("labels")

    def fields(
        self, *subfields: Union[FeedbackExplanationDataMergeGraphQLField, "LabelFields"]
    ) -> "FeedbackExplanationDataMergeFields":
        """Subfields should come from the FeedbackExplanationDataMergeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "FeedbackExplanationDataMergeFields":
        self._alias = alias
        return self


class FeedbackExplanationDataRefineFields(GraphQLField):
    @classmethod
    def changes(cls) -> "FeedbackExplanationDataRefineChangesFields":
        return FeedbackExplanationDataRefineChangesFields("changes")

    def fields(
        self,
        *subfields: Union[
            FeedbackExplanationDataRefineGraphQLField,
            "FeedbackExplanationDataRefineChangesFields",
        ]
    ) -> "FeedbackExplanationDataRefineFields":
        """Subfields should come from the FeedbackExplanationDataRefineFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "FeedbackExplanationDataRefineFields":
        self._alias = alias
        return self


class FeedbackExplanationDataRefineChangesFields(GraphQLField):
    attribute: "FeedbackExplanationDataRefineChangesGraphQLField" = (
        FeedbackExplanationDataRefineChangesGraphQLField("attribute")
    )
    new_value: "FeedbackExplanationDataRefineChangesGraphQLField" = (
        FeedbackExplanationDataRefineChangesGraphQLField("newValue")
    )
    original_value: "FeedbackExplanationDataRefineChangesGraphQLField" = (
        FeedbackExplanationDataRefineChangesGraphQLField("originalValue")
    )

    def fields(
        self, *subfields: FeedbackExplanationDataRefineChangesGraphQLField
    ) -> "FeedbackExplanationDataRefineChangesFields":
        """Subfields should come from the FeedbackExplanationDataRefineChangesFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "FeedbackExplanationDataRefineChangesFields":
        self._alias = alias
        return self


class FeedbackExplanationDataSplitFields(GraphQLField):
    comment: "FeedbackExplanationDataSplitGraphQLField" = (
        FeedbackExplanationDataSplitGraphQLField("comment")
    )
    labels_number: "FeedbackExplanationDataSplitGraphQLField" = (
        FeedbackExplanationDataSplitGraphQLField("labelsNumber")
    )

    @classmethod
    def labels(cls) -> "FeedbackExplanationDataSplitLabelsFields":
        return FeedbackExplanationDataSplitLabelsFields("labels")

    def fields(
        self,
        *subfields: Union[
            FeedbackExplanationDataSplitGraphQLField,
            "FeedbackExplanationDataSplitLabelsFields",
        ]
    ) -> "FeedbackExplanationDataSplitFields":
        """Subfields should come from the FeedbackExplanationDataSplitFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "FeedbackExplanationDataSplitFields":
        self._alias = alias
        return self


class FeedbackExplanationDataSplitLabelsFields(GraphQLField):
    name: "FeedbackExplanationDataSplitLabelsGraphQLField" = (
        FeedbackExplanationDataSplitLabelsGraphQLField("name")
    )
    marker_genes: "FeedbackExplanationDataSplitLabelsGraphQLField" = (
        FeedbackExplanationDataSplitLabelsGraphQLField("markerGenes")
    )

    def fields(
        self, *subfields: FeedbackExplanationDataSplitLabelsGraphQLField
    ) -> "FeedbackExplanationDataSplitLabelsFields":
        """Subfields should come from the FeedbackExplanationDataSplitLabelsFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "FeedbackExplanationDataSplitLabelsFields":
        self._alias = alias
        return self


class GeneRowFields(GraphQLField):
    name: "GeneRowGraphQLField" = GeneRowGraphQLField("name")
    score: "GeneRowGraphQLField" = GeneRowGraphQLField("score")
    log_fold_change: "GeneRowGraphQLField" = GeneRowGraphQLField("logFoldChange")
    p_value: "GeneRowGraphQLField" = GeneRowGraphQLField("pValue")
    dispersion: "GeneRowGraphQLField" = GeneRowGraphQLField("dispersion")
    highly_variable: "GeneRowGraphQLField" = GeneRowGraphQLField("highlyVariable")

    def fields(self, *subfields: GeneRowGraphQLField) -> "GeneRowFields":
        """Subfields should come from the GeneRowFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "GeneRowFields":
        self._alias = alias
        return self


class GenesObjectFields(GraphQLField):
    data: "GenesObjectGraphQLField" = GenesObjectGraphQLField("data")

    def fields(self, *subfields: GenesObjectGraphQLField) -> "GenesObjectFields":
        """Subfields should come from the GenesObjectFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "GenesObjectFields":
        self._alias = alias
        return self


class GenesRowsFields(GraphQLField):
    selection: "GenesRowsGraphQLField" = GenesRowsGraphQLField("selection")

    @classmethod
    def genes(cls) -> "GeneRowFields":
        return GeneRowFields("genes")

    def fields(
        self, *subfields: Union[GenesRowsGraphQLField, "GeneRowFields"]
    ) -> "GenesRowsFields":
        """Subfields should come from the GenesRowsFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "GenesRowsFields":
        self._alias = alias
        return self


class GroupedMetadataResponseFields(GraphQLField):
    group: "GroupedMetadataResponseGraphQLField" = GroupedMetadataResponseGraphQLField(
        "group"
    )

    @classmethod
    def metadata(cls) -> "DatasetMetadataCountResponseFields":
        return DatasetMetadataCountResponseFields("metadata")

    def fields(
        self,
        *subfields: Union[
            GroupedMetadataResponseGraphQLField, "DatasetMetadataCountResponseFields"
        ]
    ) -> "GroupedMetadataResponseFields":
        """Subfields should come from the GroupedMetadataResponseFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "GroupedMetadataResponseFields":
        self._alias = alias
        return self


class HeatmapFields(GraphQLField):
    @classmethod
    def annotations(cls) -> "AnnotationsObjectFields":
        return AnnotationsObjectFields("annotations")

    @classmethod
    def genes(cls) -> "GenesObjectFields":
        return GenesObjectFields("genes")

    @classmethod
    def obs_ids(cls) -> "ObsIDSObjectFields":
        return ObsIDSObjectFields("obs_ids")

    @classmethod
    def scores(cls) -> "ScoresObjectFields":
        return ScoresObjectFields("scores")

    @classmethod
    def is_in_selections(cls) -> "IsInSelectionsObjectFields":
        return IsInSelectionsObjectFields("is_in_selections")

    @classmethod
    def top_genes_by_selection(cls) -> "HeatmapTopGenesBySelectionFields":
        return HeatmapTopGenesBySelectionFields("top_genes_by_selection")

    def fields(
        self,
        *subfields: Union[
            HeatmapGraphQLField,
            "AnnotationsObjectFields",
            "GenesObjectFields",
            "HeatmapTopGenesBySelectionFields",
            "IsInSelectionsObjectFields",
            "ObsIDSObjectFields",
            "ScoresObjectFields",
        ]
    ) -> "HeatmapFields":
        """Subfields should come from the HeatmapFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "HeatmapFields":
        self._alias = alias
        return self


class HeatmapTopGenesBySelectionFields(GraphQLField):
    selection_name: "HeatmapTopGenesBySelectionGraphQLField" = (
        HeatmapTopGenesBySelectionGraphQLField("selectionName")
    )
    genes: "HeatmapTopGenesBySelectionGraphQLField" = (
        HeatmapTopGenesBySelectionGraphQLField("genes")
    )

    def fields(
        self, *subfields: HeatmapTopGenesBySelectionGraphQLField
    ) -> "HeatmapTopGenesBySelectionFields":
        """Subfields should come from the HeatmapTopGenesBySelectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "HeatmapTopGenesBySelectionFields":
        self._alias = alias
        return self


class HighlyVariableGeneRowFields(GraphQLField):
    name: "HighlyVariableGeneRowGraphQLField" = HighlyVariableGeneRowGraphQLField(
        "name"
    )
    dispersion: "HighlyVariableGeneRowGraphQLField" = HighlyVariableGeneRowGraphQLField(
        "dispersion"
    )
    highly_variable: "HighlyVariableGeneRowGraphQLField" = (
        HighlyVariableGeneRowGraphQLField("highlyVariable")
    )

    def fields(
        self, *subfields: HighlyVariableGeneRowGraphQLField
    ) -> "HighlyVariableGeneRowFields":
        """Subfields should come from the HighlyVariableGeneRowFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "HighlyVariableGeneRowFields":
        self._alias = alias
        return self


class HomepageStatisticsResponseFields(GraphQLField):
    @classmethod
    def cells(cls) -> "StateResponseFields":
        return StateResponseFields("cells")

    @classmethod
    def datasets(cls) -> "StateResponseFields":
        return StateResponseFields("datasets")

    @classmethod
    def organisms(cls) -> "StateResponseFields":
        return StateResponseFields("organisms")

    @classmethod
    def labels(cls) -> "StateResponseFields":
        return StateResponseFields("labels")

    @classmethod
    def projects(cls) -> "StateResponseFields":
        return StateResponseFields("projects")

    @classmethod
    def tissues(cls) -> "StateResponseFields":
        return StateResponseFields("tissues")

    def fields(
        self,
        *subfields: Union[HomepageStatisticsResponseGraphQLField, "StateResponseFields"]
    ) -> "HomepageStatisticsResponseFields":
        """Subfields should come from the HomepageStatisticsResponseFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "HomepageStatisticsResponseFields":
        self._alias = alias
        return self


class IsInSelectionsObjectFields(GraphQLField):
    data: "IsInSelectionsObjectGraphQLField" = IsInSelectionsObjectGraphQLField("data")

    def fields(
        self, *subfields: IsInSelectionsObjectGraphQLField
    ) -> "IsInSelectionsObjectFields":
        """Subfields should come from the IsInSelectionsObjectFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "IsInSelectionsObjectFields":
        self._alias = alias
        return self


class LabelFields(GraphQLField):
    id: "LabelGraphQLField" = LabelGraphQLField("id")
    labelset_id: "LabelGraphQLField" = LabelGraphQLField("labelsetId")
    count: "LabelGraphQLField" = LabelGraphQLField("count")
    name: "LabelGraphQLField" = LabelGraphQLField("name")
    is_active: "LabelGraphQLField" = LabelGraphQLField("isActive")
    color: "LabelGraphQLField" = LabelGraphQLField("color")
    deleted_at: "LabelGraphQLField" = LabelGraphQLField("deletedAt")
    created_at: "LabelGraphQLField" = LabelGraphQLField("createdAt")
    synonyms: "LabelGraphQLField" = LabelGraphQLField("synonyms")

    @classmethod
    def polygon(cls) -> "PolygonCoordFields":
        return PolygonCoordFields("polygon")

    marker_genes: "LabelGraphQLField" = LabelGraphQLField("markerGenes")
    category_full_name: "LabelGraphQLField" = LabelGraphQLField("categoryFullName")
    category_ontology_term_exists: "LabelGraphQLField" = LabelGraphQLField(
        "categoryOntologyTermExists"
    )
    category_ontology_term: "LabelGraphQLField" = LabelGraphQLField(
        "categoryOntologyTerm"
    )
    category_ontology_term_id: "LabelGraphQLField" = LabelGraphQLField(
        "categoryOntologyTermId"
    )
    ontology_term_exists: "LabelGraphQLField" = LabelGraphQLField("ontologyTermExists")
    ontology_term: "LabelGraphQLField" = LabelGraphQLField("ontologyTerm")
    ontology_term_id: "LabelGraphQLField" = LabelGraphQLField("ontologyTermId")
    ontology_assessment: "LabelGraphQLField" = LabelGraphQLField("ontologyAssessment")
    full_name: "LabelGraphQLField" = LabelGraphQLField("fullName")
    rationale: "LabelGraphQLField" = LabelGraphQLField("rationale")
    rationale_dois: "LabelGraphQLField" = LabelGraphQLField("rationaleDois")
    canonical_marker_genes: "LabelGraphQLField" = LabelGraphQLField(
        "canonicalMarkerGenes"
    )

    @classmethod
    def relations(cls) -> "LabelRelationFields":
        return LabelRelationFields("relations")

    @classmethod
    def labelset(cls) -> "LabelsetFields":
        return LabelsetFields("labelset")

    @classmethod
    def feedbacks(
        cls, *, options: Optional[ListLabelFeedbackOptions] = None
    ) -> "LabelFeedbackFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "options": {"type": "ListLabelFeedbackOptions", "value": options}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelFeedbackFields("feedbacks", arguments=cleared_arguments)

    @classmethod
    def scores(cls) -> "LabelScoresFields":
        return LabelScoresFields("scores")

    def fields(
        self,
        *subfields: Union[
            LabelGraphQLField,
            "LabelFeedbackFields",
            "LabelRelationFields",
            "LabelScoresFields",
            "LabelsetFields",
            "PolygonCoordFields",
        ]
    ) -> "LabelFields":
        """Subfields should come from the LabelFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "LabelFields":
        self._alias = alias
        return self


class LabelCategoryFields(GraphQLField):
    id: "LabelCategoryGraphQLField" = LabelCategoryGraphQLField("id")
    category_full_name: "LabelCategoryGraphQLField" = LabelCategoryGraphQLField(
        "categoryFullName"
    )
    category_ontology_term_exists: "LabelCategoryGraphQLField" = (
        LabelCategoryGraphQLField("categoryOntologyTermExists")
    )
    category_ontology_term: "LabelCategoryGraphQLField" = LabelCategoryGraphQLField(
        "categoryOntologyTerm"
    )
    category_ontology_term_id: "LabelCategoryGraphQLField" = LabelCategoryGraphQLField(
        "categoryOntologyTermId"
    )

    def fields(self, *subfields: LabelCategoryGraphQLField) -> "LabelCategoryFields":
        """Subfields should come from the LabelCategoryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "LabelCategoryFields":
        self._alias = alias
        return self


class LabelFeedbackFields(GraphQLField):
    score: "LabelFeedbackGraphQLField" = LabelFeedbackGraphQLField("score")

    @classmethod
    def explanation(cls) -> "LabelFeedbackExplanationFields":
        return LabelFeedbackExplanationFields("explanation")

    created_at: "LabelFeedbackGraphQLField" = LabelFeedbackGraphQLField("createdAt")
    is_updated: "LabelFeedbackGraphQLField" = LabelFeedbackGraphQLField("isUpdated")

    @classmethod
    def user(cls) -> "CapUserFields":
        return CapUserFields("user")

    @classmethod
    def label(cls) -> "LabelFields":
        return LabelFields("label")

    def fields(
        self,
        *subfields: Union[
            LabelFeedbackGraphQLField,
            "CapUserFields",
            "LabelFeedbackExplanationFields",
            "LabelFields",
        ]
    ) -> "LabelFeedbackFields":
        """Subfields should come from the LabelFeedbackFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "LabelFeedbackFields":
        self._alias = alias
        return self


class LabelFeedbackExplanationFields(GraphQLField):
    type: "LabelFeedbackExplanationGraphQLField" = LabelFeedbackExplanationGraphQLField(
        "type"
    )
    data: "ExplanationDataUnion" = ExplanationDataUnion("data")

    def fields(
        self,
        *subfields: Union[LabelFeedbackExplanationGraphQLField, "ExplanationDataUnion"]
    ) -> "LabelFeedbackExplanationFields":
        """Subfields should come from the LabelFeedbackExplanationFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "LabelFeedbackExplanationFields":
        self._alias = alias
        return self


class LabelModelFields(GraphQLField):
    canonical_marker_genes: "LabelModelGraphQLField" = LabelModelGraphQLField(
        "canonicalMarkerGenes"
    )
    category_full_name: "LabelModelGraphQLField" = LabelModelGraphQLField(
        "categoryFullName"
    )
    category_ontology_term: "LabelModelGraphQLField" = LabelModelGraphQLField(
        "categoryOntologyTerm"
    )
    category_ontology_term_exists: "LabelModelGraphQLField" = LabelModelGraphQLField(
        "categoryOntologyTermExists"
    )
    category_ontology_term_id: "LabelModelGraphQLField" = LabelModelGraphQLField(
        "categoryOntologyTermId"
    )
    color: "LabelModelGraphQLField" = LabelModelGraphQLField("color")
    count: "LabelModelGraphQLField" = LabelModelGraphQLField("count")
    full_name: "LabelModelGraphQLField" = LabelModelGraphQLField("fullName")
    id: "LabelModelGraphQLField" = LabelModelGraphQLField("id")
    marker_genes: "LabelModelGraphQLField" = LabelModelGraphQLField("markerGenes")
    name: "LabelModelGraphQLField" = LabelModelGraphQLField("name")
    ontology_assessment: "LabelModelGraphQLField" = LabelModelGraphQLField(
        "ontologyAssessment"
    )
    ontology_term: "LabelModelGraphQLField" = LabelModelGraphQLField("ontologyTerm")
    ontology_term_exists: "LabelModelGraphQLField" = LabelModelGraphQLField(
        "ontologyTermExists"
    )
    ontology_term_id: "LabelModelGraphQLField" = LabelModelGraphQLField(
        "ontologyTermId"
    )
    rationale: "LabelModelGraphQLField" = LabelModelGraphQLField("rationale")
    rationale_dois: "LabelModelGraphQLField" = LabelModelGraphQLField("rationaleDois")
    synonyms: "LabelModelGraphQLField" = LabelModelGraphQLField("synonyms")

    def fields(self, *subfields: LabelModelGraphQLField) -> "LabelModelFields":
        """Subfields should come from the LabelModelFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "LabelModelFields":
        self._alias = alias
        return self


class LabelRelationFields(GraphQLField):
    @classmethod
    def label(cls) -> "LabelFields":
        return LabelFields("label")

    cell_count: "LabelRelationGraphQLField" = LabelRelationGraphQLField("cellCount")

    def fields(
        self, *subfields: Union[LabelRelationGraphQLField, "LabelFields"]
    ) -> "LabelRelationFields":
        """Subfields should come from the LabelRelationFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "LabelRelationFields":
        self._alias = alias
        return self


class LabelScoresFields(GraphQLField):
    average: "LabelScoresGraphQLField" = LabelScoresGraphQLField("average")
    agree: "LabelScoresGraphQLField" = LabelScoresGraphQLField("agree")
    disagree: "LabelScoresGraphQLField" = LabelScoresGraphQLField("disagree")
    idk: "LabelScoresGraphQLField" = LabelScoresGraphQLField("idk")
    total: "LabelScoresGraphQLField" = LabelScoresGraphQLField("total")

    def fields(self, *subfields: LabelScoresGraphQLField) -> "LabelScoresFields":
        """Subfields should come from the LabelScoresFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "LabelScoresFields":
        self._alias = alias
        return self


class LabelSynonymFields(GraphQLField):
    id: "LabelSynonymGraphQLField" = LabelSynonymGraphQLField("id")
    original_name: "LabelSynonymGraphQLField" = LabelSynonymGraphQLField("originalName")

    def fields(self, *subfields: LabelSynonymGraphQLField) -> "LabelSynonymFields":
        """Subfields should come from the LabelSynonymFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "LabelSynonymFields":
        self._alias = alias
        return self


class LabelValidationResultFields(GraphQLField):
    name: "LabelValidationResultGraphQLField" = LabelValidationResultGraphQLField(
        "name"
    )

    @classmethod
    def errors(cls) -> "LabelValidationResultErrorsFields":
        return LabelValidationResultErrorsFields("errors")

    def fields(
        self,
        *subfields: Union[
            LabelValidationResultGraphQLField, "LabelValidationResultErrorsFields"
        ]
    ) -> "LabelValidationResultFields":
        """Subfields should come from the LabelValidationResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "LabelValidationResultFields":
        self._alias = alias
        return self


class LabelValidationResultErrorsFields(GraphQLField):
    name: "LabelValidationResultErrorsGraphQLField" = (
        LabelValidationResultErrorsGraphQLField("name")
    )
    full_name: "LabelValidationResultErrorsGraphQLField" = (
        LabelValidationResultErrorsGraphQLField("fullName")
    )
    ontology_term_exists: "LabelValidationResultErrorsGraphQLField" = (
        LabelValidationResultErrorsGraphQLField("ontologyTermExists")
    )
    ontology_term: "LabelValidationResultErrorsGraphQLField" = (
        LabelValidationResultErrorsGraphQLField("ontologyTerm")
    )
    ontology_term_id: "LabelValidationResultErrorsGraphQLField" = (
        LabelValidationResultErrorsGraphQLField("ontologyTermId")
    )
    rationale: "LabelValidationResultErrorsGraphQLField" = (
        LabelValidationResultErrorsGraphQLField("rationale")
    )
    marker_genes: "LabelValidationResultErrorsGraphQLField" = (
        LabelValidationResultErrorsGraphQLField("markerGenes")
    )
    synonyms: "LabelValidationResultErrorsGraphQLField" = (
        LabelValidationResultErrorsGraphQLField("synonyms")
    )
    category_full_name: "LabelValidationResultErrorsGraphQLField" = (
        LabelValidationResultErrorsGraphQLField("categoryFullName")
    )
    category_ontology_term_exists: "LabelValidationResultErrorsGraphQLField" = (
        LabelValidationResultErrorsGraphQLField("categoryOntologyTermExists")
    )
    category_ontology_term: "LabelValidationResultErrorsGraphQLField" = (
        LabelValidationResultErrorsGraphQLField("categoryOntologyTerm")
    )
    category_ontology_term_id: "LabelValidationResultErrorsGraphQLField" = (
        LabelValidationResultErrorsGraphQLField("categoryOntologyTermId")
    )
    ontology_assessment: "LabelValidationResultErrorsGraphQLField" = (
        LabelValidationResultErrorsGraphQLField("ontologyAssessment")
    )
    canonical_marker_genes: "LabelValidationResultErrorsGraphQLField" = (
        LabelValidationResultErrorsGraphQLField("canonicalMarkerGenes")
    )
    rationale_dois: "LabelValidationResultErrorsGraphQLField" = (
        LabelValidationResultErrorsGraphQLField("rationaleDois")
    )
    count: "LabelValidationResultErrorsGraphQLField" = (
        LabelValidationResultErrorsGraphQLField("count")
    )

    def fields(
        self, *subfields: LabelValidationResultErrorsGraphQLField
    ) -> "LabelValidationResultErrorsFields":
        """Subfields should come from the LabelValidationResultErrorsFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "LabelValidationResultErrorsFields":
        self._alias = alias
        return self


class LabelsetFields(GraphQLField):
    id: "LabelsetGraphQLField" = LabelsetGraphQLField("id")
    dataset_id: "LabelsetGraphQLField" = LabelsetGraphQLField("datasetId")
    name: "LabelsetGraphQLField" = LabelsetGraphQLField("name")
    embedding: "LabelsetGraphQLField" = LabelsetGraphQLField("embedding")
    mode: "LabelsetGraphQLField" = LabelsetGraphQLField("mode")
    status: "LabelsetGraphQLField" = LabelsetGraphQLField("status")
    description: "LabelsetGraphQLField" = LabelsetGraphQLField("description")
    annotation_method: "LabelsetGraphQLField" = LabelsetGraphQLField("annotationMethod")
    algorithm_name: "LabelsetGraphQLField" = LabelsetGraphQLField("algorithmName")
    algorithm_version: "LabelsetGraphQLField" = LabelsetGraphQLField("algorithmVersion")
    algorithm_repo_url: "LabelsetGraphQLField" = LabelsetGraphQLField(
        "algorithmRepoUrl"
    )
    reference_location: "LabelsetGraphQLField" = LabelsetGraphQLField(
        "referenceLocation"
    )
    reference_description: "LabelsetGraphQLField" = LabelsetGraphQLField(
        "referenceDescription"
    )
    version: "LabelsetGraphQLField" = LabelsetGraphQLField("version")

    @classmethod
    def labels(cls) -> "LabelFields":
        return LabelFields("labels")

    @classmethod
    def dataset(cls) -> "DatasetFields":
        return DatasetFields("dataset")

    def fields(
        self, *subfields: Union[LabelsetGraphQLField, "DatasetFields", "LabelFields"]
    ) -> "LabelsetFields":
        """Subfields should come from the LabelsetFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "LabelsetFields":
        self._alias = alias
        return self


class LabelsetModelFields(GraphQLField):
    algorithm_name: "LabelsetModelGraphQLField" = LabelsetModelGraphQLField(
        "algorithmName"
    )
    algorithm_repo_url: "LabelsetModelGraphQLField" = LabelsetModelGraphQLField(
        "algorithmRepoUrl"
    )
    algorithm_version: "LabelsetModelGraphQLField" = LabelsetModelGraphQLField(
        "algorithmVersion"
    )
    annotation_method: "LabelsetModelGraphQLField" = LabelsetModelGraphQLField(
        "annotationMethod"
    )
    description: "LabelsetModelGraphQLField" = LabelsetModelGraphQLField("description")
    embedding: "LabelsetModelGraphQLField" = LabelsetModelGraphQLField("embedding")
    id: "LabelsetModelGraphQLField" = LabelsetModelGraphQLField("id")

    @classmethod
    def labels(cls) -> "LabelModelFields":
        return LabelModelFields("labels")

    mode: "LabelsetModelGraphQLField" = LabelsetModelGraphQLField("mode")
    name: "LabelsetModelGraphQLField" = LabelsetModelGraphQLField("name")
    reference_description: "LabelsetModelGraphQLField" = LabelsetModelGraphQLField(
        "referenceDescription"
    )
    reference_location: "LabelsetModelGraphQLField" = LabelsetModelGraphQLField(
        "referenceLocation"
    )

    def fields(
        self, *subfields: Union[LabelsetModelGraphQLField, "LabelModelFields"]
    ) -> "LabelsetModelFields":
        """Subfields should come from the LabelsetModelFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "LabelsetModelFields":
        self._alias = alias
        return self


class LabelsetValidationResultFields(GraphQLField):
    name: "LabelsetValidationResultGraphQLField" = LabelsetValidationResultGraphQLField(
        "name"
    )

    @classmethod
    def errors(cls) -> "LabelsetValidationResultErrorsFields":
        return LabelsetValidationResultErrorsFields("errors")

    @classmethod
    def labels(cls) -> "LabelValidationResultFields":
        return LabelValidationResultFields("labels")

    def fields(
        self,
        *subfields: Union[
            LabelsetValidationResultGraphQLField,
            "LabelValidationResultFields",
            "LabelsetValidationResultErrorsFields",
        ]
    ) -> "LabelsetValidationResultFields":
        """Subfields should come from the LabelsetValidationResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "LabelsetValidationResultFields":
        self._alias = alias
        return self


class LabelsetValidationResultErrorsFields(GraphQLField):
    name: "LabelsetValidationResultErrorsGraphQLField" = (
        LabelsetValidationResultErrorsGraphQLField("name")
    )
    description: "LabelsetValidationResultErrorsGraphQLField" = (
        LabelsetValidationResultErrorsGraphQLField("description")
    )
    cell_count: "LabelsetValidationResultErrorsGraphQLField" = (
        LabelsetValidationResultErrorsGraphQLField("cellCount")
    )
    empty_values: "LabelsetValidationResultErrorsGraphQLField" = (
        LabelsetValidationResultErrorsGraphQLField("emptyValues")
    )
    annotation_method: "LabelsetValidationResultErrorsGraphQLField" = (
        LabelsetValidationResultErrorsGraphQLField("annotationMethod")
    )
    algorithm_name: "LabelsetValidationResultErrorsGraphQLField" = (
        LabelsetValidationResultErrorsGraphQLField("algorithmName")
    )
    algorithm_version: "LabelsetValidationResultErrorsGraphQLField" = (
        LabelsetValidationResultErrorsGraphQLField("algorithmVersion")
    )
    algorithm_repo_url: "LabelsetValidationResultErrorsGraphQLField" = (
        LabelsetValidationResultErrorsGraphQLField("algorithmRepoUrl")
    )
    reference_location: "LabelsetValidationResultErrorsGraphQLField" = (
        LabelsetValidationResultErrorsGraphQLField("referenceLocation")
    )
    reference_description: "LabelsetValidationResultErrorsGraphQLField" = (
        LabelsetValidationResultErrorsGraphQLField("referenceDescription")
    )

    def fields(
        self, *subfields: LabelsetValidationResultErrorsGraphQLField
    ) -> "LabelsetValidationResultErrorsFields":
        """Subfields should come from the LabelsetValidationResultErrorsFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "LabelsetValidationResultErrorsFields":
        self._alias = alias
        return self


class ObsDetailsFields(GraphQLField):
    @classmethod
    def point(cls) -> "ObsDetailsResponsePointFields":
        return ObsDetailsResponsePointFields("point")

    def fields(
        self, *subfields: Union[ObsDetailsGraphQLField, "ObsDetailsResponsePointFields"]
    ) -> "ObsDetailsFields":
        """Subfields should come from the ObsDetailsFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ObsDetailsFields":
        self._alias = alias
        return self


class ObsDetailsResponsePointFields(GraphQLField):
    x: "ObsDetailsResponsePointGraphQLField" = ObsDetailsResponsePointGraphQLField("x")
    y: "ObsDetailsResponsePointGraphQLField" = ObsDetailsResponsePointGraphQLField("y")

    def fields(
        self, *subfields: ObsDetailsResponsePointGraphQLField
    ) -> "ObsDetailsResponsePointFields":
        """Subfields should come from the ObsDetailsResponsePointFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ObsDetailsResponsePointFields":
        self._alias = alias
        return self


class ObsIDSObjectFields(GraphQLField):
    data: "ObsIDSObjectGraphQLField" = ObsIDSObjectGraphQLField("data")

    def fields(self, *subfields: ObsIDSObjectGraphQLField) -> "ObsIDSObjectFields":
        """Subfields should come from the ObsIDSObjectFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ObsIDSObjectFields":
        self._alias = alias
        return self


class OperationResultFields(GraphQLField):
    ok: "OperationResultGraphQLField" = OperationResultGraphQLField("ok")
    msg: "OperationResultGraphQLField" = OperationResultGraphQLField("msg")

    def fields(
        self, *subfields: OperationResultGraphQLField
    ) -> "OperationResultFields":
        """Subfields should come from the OperationResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "OperationResultFields":
        self._alias = alias
        return self


class OperationResultResponseFields(GraphQLField):
    ok: "OperationResultResponseGraphQLField" = OperationResultResponseGraphQLField(
        "ok"
    )

    def fields(
        self, *subfields: OperationResultResponseGraphQLField
    ) -> "OperationResultResponseFields":
        """Subfields should come from the OperationResultResponseFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "OperationResultResponseFields":
        self._alias = alias
        return self


class PolygonCoordFields(GraphQLField):
    x: "PolygonCoordGraphQLField" = PolygonCoordGraphQLField("x")
    y: "PolygonCoordGraphQLField" = PolygonCoordGraphQLField("y")

    def fields(self, *subfields: PolygonCoordGraphQLField) -> "PolygonCoordFields":
        """Subfields should come from the PolygonCoordFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PolygonCoordFields":
        self._alias = alias
        return self


class ProjectFields(GraphQLField):
    id: "ProjectGraphQLField" = ProjectGraphQLField("id")
    created_at: "ProjectGraphQLField" = ProjectGraphQLField("createdAt")
    updated_at: "ProjectGraphQLField" = ProjectGraphQLField("updatedAt")
    name: "ProjectGraphQLField" = ProjectGraphQLField("name")
    description: "ProjectGraphQLField" = ProjectGraphQLField("description")
    version: "ProjectGraphQLField" = ProjectGraphQLField("version")
    is_placeholder: "ProjectGraphQLField" = ProjectGraphQLField("isPlaceholder")
    contact_email: "ProjectGraphQLField" = ProjectGraphQLField("contactEmail")
    contact_emails: "ProjectGraphQLField" = ProjectGraphQLField("contactEmails")
    external_url: "ProjectGraphQLField" = ProjectGraphQLField("externalUrl")
    external_urls: "ProjectGraphQLField" = ProjectGraphQLField("externalUrls")
    contact_name: "ProjectGraphQLField" = ProjectGraphQLField("contactName")
    contact_names: "ProjectGraphQLField" = ProjectGraphQLField("contactNames")
    journal_doi: "ProjectGraphQLField" = ProjectGraphQLField("journalDoi")
    raw_data_url: "ProjectGraphQLField" = ProjectGraphQLField("rawDataUrl")
    last_updated_by_uid: "ProjectGraphQLField" = ProjectGraphQLField("lastUpdatedByUid")

    @classmethod
    def updated_by(cls) -> "CapUserFields":
        return CapUserFields("updated_by")

    owner_uid: "ProjectGraphQLField" = ProjectGraphQLField("ownerUid")
    doi: "ProjectGraphQLField" = ProjectGraphQLField("doi")

    @classmethod
    def owner(cls) -> "CapUserFields":
        return CapUserFields("owner")

    status: "ProjectGraphQLField" = ProjectGraphQLField("status")
    cap_authors: "ProjectGraphQLField" = ProjectGraphQLField("capAuthors")

    @classmethod
    def datasets(cls) -> "DatasetFields":
        return DatasetFields("datasets")

    @classmethod
    def versions(cls) -> "ProjectFields":
        return ProjectFields("versions")

    @classmethod
    def permissions(cls) -> "ProjectPermissionFields":
        return ProjectPermissionFields("permissions")

    can_publish: "ProjectGraphQLField" = ProjectGraphQLField("canPublish")

    def fields(
        self,
        *subfields: Union[
            ProjectGraphQLField,
            "CapUserFields",
            "DatasetFields",
            "ProjectFields",
            "ProjectPermissionFields",
        ]
    ) -> "ProjectFields":
        """Subfields should come from the ProjectFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectFields":
        self._alias = alias
        return self


class ProjectPermissionFields(GraphQLField):
    id: "ProjectPermissionGraphQLField" = ProjectPermissionGraphQLField("id")
    user_uid: "ProjectPermissionGraphQLField" = ProjectPermissionGraphQLField("userUid")
    role: "ProjectPermissionGraphQLField" = ProjectPermissionGraphQLField("role")
    is_active: "ProjectPermissionGraphQLField" = ProjectPermissionGraphQLField(
        "isActive"
    )

    @classmethod
    def project(cls) -> "ProjectFields":
        return ProjectFields("project")

    @classmethod
    def user(cls) -> "CapUserFields":
        return CapUserFields("user")

    def fields(
        self,
        *subfields: Union[
            ProjectPermissionGraphQLField, "CapUserFields", "ProjectFields"
        ]
    ) -> "ProjectPermissionFields":
        """Subfields should come from the ProjectPermissionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ProjectPermissionFields":
        self._alias = alias
        return self


class SankeyFields(GraphQLField):
    @classmethod
    def links(cls) -> "SankeyDataLinkFields":
        return SankeyDataLinkFields("links")

    @classmethod
    def nodes(cls) -> "SankeyDataNodeFields":
        return SankeyDataNodeFields("nodes")

    def fields(
        self,
        *subfields: Union[
            SankeyGraphQLField, "SankeyDataLinkFields", "SankeyDataNodeFields"
        ]
    ) -> "SankeyFields":
        """Subfields should come from the SankeyFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SankeyFields":
        self._alias = alias
        return self


class SankeyDataLinkFields(GraphQLField):
    color: "SankeyDataLinkGraphQLField" = SankeyDataLinkGraphQLField("color")
    count: "SankeyDataLinkGraphQLField" = SankeyDataLinkGraphQLField("count")
    id: "SankeyDataLinkGraphQLField" = SankeyDataLinkGraphQLField("id")
    source: "SankeyDataLinkGraphQLField" = SankeyDataLinkGraphQLField("source")
    source_id: "SankeyDataLinkGraphQLField" = SankeyDataLinkGraphQLField("source_id")
    target: "SankeyDataLinkGraphQLField" = SankeyDataLinkGraphQLField("target")
    target_id: "SankeyDataLinkGraphQLField" = SankeyDataLinkGraphQLField("target_id")

    def fields(self, *subfields: SankeyDataLinkGraphQLField) -> "SankeyDataLinkFields":
        """Subfields should come from the SankeyDataLinkFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SankeyDataLinkFields":
        self._alias = alias
        return self


class SankeyDataNodeFields(GraphQLField):
    color: "SankeyDataNodeGraphQLField" = SankeyDataNodeGraphQLField("color")
    title: "SankeyDataNodeGraphQLField" = SankeyDataNodeGraphQLField("title")

    def fields(self, *subfields: SankeyDataNodeGraphQLField) -> "SankeyDataNodeFields":
        """Subfields should come from the SankeyDataNodeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SankeyDataNodeFields":
        self._alias = alias
        return self


class ScoresObjectFields(GraphQLField):
    data: "ScoresObjectGraphQLField" = ScoresObjectGraphQLField("data")

    def fields(self, *subfields: ScoresObjectGraphQLField) -> "ScoresObjectFields":
        """Subfields should come from the ScoresObjectFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ScoresObjectFields":
        self._alias = alias
        return self


class StandardResponseFields(GraphQLField):
    msg: "StandardResponseGraphQLField" = StandardResponseGraphQLField("msg")
    error: "StandardResponseGraphQLField" = StandardResponseGraphQLField("error")

    def fields(
        self, *subfields: StandardResponseGraphQLField
    ) -> "StandardResponseFields":
        """Subfields should come from the StandardResponseFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "StandardResponseFields":
        self._alias = alias
        return self


class StateResponseFields(GraphQLField):
    total: "StateResponseGraphQLField" = StateResponseGraphQLField("total")

    def fields(self, *subfields: StateResponseGraphQLField) -> "StateResponseFields":
        """Subfields should come from the StateResponseFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "StateResponseFields":
        self._alias = alias
        return self


class TissueLowerTermFields(GraphQLField):
    name: "TissueLowerTermGraphQLField" = TissueLowerTermGraphQLField("name")
    ontology_term_id: "TissueLowerTermGraphQLField" = TissueLowerTermGraphQLField(
        "ontologyTermId"
    )

    def fields(
        self, *subfields: TissueLowerTermGraphQLField
    ) -> "TissueLowerTermFields":
        """Subfields should come from the TissueLowerTermFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TissueLowerTermFields":
        self._alias = alias
        return self


class TissueTermFields(GraphQLField):
    name: "TissueTermGraphQLField" = TissueTermGraphQLField("name")
    ontology_term_id: "TissueTermGraphQLField" = TissueTermGraphQLField(
        "ontologyTermId"
    )

    @classmethod
    def lower_terms(cls) -> "TissueLowerTermFields":
        return TissueLowerTermFields("lower_terms")

    def fields(
        self, *subfields: Union[TissueTermGraphQLField, "TissueLowerTermFields"]
    ) -> "TissueTermFields":
        """Subfields should come from the TissueTermFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TissueTermFields":
        self._alias = alias
        return self


class UploadErrorItemFields(GraphQLField):
    id: "UploadErrorItemGraphQLField" = UploadErrorItemGraphQLField("id")
    error: "UploadErrorItemGraphQLField" = UploadErrorItemGraphQLField("error")
    message: "UploadErrorItemGraphQLField" = UploadErrorItemGraphQLField("message")
    meta: "UploadErrorItemGraphQLField" = UploadErrorItemGraphQLField("meta")

    def fields(
        self, *subfields: UploadErrorItemGraphQLField
    ) -> "UploadErrorItemFields":
        """Subfields should come from the UploadErrorItemFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UploadErrorItemFields":
        self._alias = alias
        return self


class UploadResponseFields(GraphQLField):
    id: "UploadResponseGraphQLField" = UploadResponseGraphQLField("id")
    file_name: "UploadResponseGraphQLField" = UploadResponseGraphQLField("fileName")
    status: "UploadResponseGraphQLField" = UploadResponseGraphQLField("status")
    error: "UploadResponseGraphQLField" = UploadResponseGraphQLField("error")
    project_id: "UploadResponseGraphQLField" = UploadResponseGraphQLField("projectId")
    uploader_uid: "UploadResponseGraphQLField" = UploadResponseGraphQLField(
        "uploaderUid"
    )

    @classmethod
    def uploader(cls) -> "CapUserFields":
        return CapUserFields("uploader")

    @classmethod
    def project(cls) -> "ProjectFields":
        return ProjectFields("project")

    @classmethod
    def errors(cls) -> "UploadErrorItemFields":
        return UploadErrorItemFields("errors")

    created_at: "UploadResponseGraphQLField" = UploadResponseGraphQLField("createdAt")
    updated_at: "UploadResponseGraphQLField" = UploadResponseGraphQLField("updatedAt")

    def fields(
        self,
        *subfields: Union[
            UploadResponseGraphQLField,
            "CapUserFields",
            "ProjectFields",
            "UploadErrorItemFields",
        ]
    ) -> "UploadResponseFields":
        """Subfields should come from the UploadResponseFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UploadResponseFields":
        self._alias = alias
        return self
